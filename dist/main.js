/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./species-1.json":
/*!************************!*\
  !*** ./species-1.json ***!
  \************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, default */
/***/ (function(module) {

eval("module.exports = [{\"genes\":[{\"from\":98,\"to\":100000,\"weight\":1.3937106127872194,\"enabled\":false,\"innovation\":143},{\"from\":88,\"to\":100006,\"weight\":0.8113459487360659,\"enabled\":false,\"innovation\":144},{\"from\":1,\"to\":100000,\"weight\":-1.9182714757520538,\"enabled\":true,\"innovation\":764},{\"from\":109,\"to\":100006,\"weight\":-0.7564579416901968,\"enabled\":true,\"innovation\":765},{\"from\":53,\"to\":100003,\"weight\":0.2963903788385265,\"enabled\":false,\"innovation\":1168},{\"from\":138,\"to\":100006,\"weight\":-0.04939120345059411,\"enabled\":true,\"innovation\":1169},{\"from\":100003,\"to\":100004,\"weight\":0.4613999194265004,\"enabled\":true,\"innovation\":1170},{\"from\":72,\"to\":100002,\"weight\":1.7444229005045555,\"enabled\":true,\"innovation\":1627},{\"from\":100,\"to\":100002,\"weight\":-1.1603340328651583,\"enabled\":true,\"innovation\":1628},{\"from\":53,\"to\":201,\"weight\":1,\"enabled\":true,\"innovation\":1629},{\"from\":201,\"to\":100003,\"weight\":1,\"enabled\":true,\"innovation\":1630},{\"from\":174,\"to\":100000,\"weight\":0.7212383255554187,\"enabled\":true,\"innovation\":2433},{\"from\":17,\"to\":100005,\"weight\":-1.361711983077794,\"enabled\":true,\"innovation\":2434},{\"from\":53,\"to\":204,\"weight\":1,\"enabled\":true,\"innovation\":2435},{\"from\":204,\"to\":100003,\"weight\":1,\"enabled\":true,\"innovation\":2436},{\"from\":164,\"to\":100005,\"weight\":-1.2651857399278272,\"enabled\":true,\"innovation\":3701},{\"from\":143,\"to\":100002,\"weight\":-0.16449423570549992,\"enabled\":true,\"innovation\":3702},{\"from\":100001,\"to\":100006,\"weight\":0.08659374509979667,\"enabled\":true,\"innovation\":3914},{\"from\":191,\"to\":100004,\"weight\":0.9061479414809428,\"enabled\":true,\"innovation\":3915},{\"from\":98,\"to\":201,\"weight\":1,\"enabled\":true,\"innovation\":3916},{\"from\":201,\"to\":100000,\"weight\":1,\"enabled\":true,\"innovation\":3917}],\"fitness\":316,\"mutationRates\":{\"connections\":0.21434374999999992,\"link\":2.3327015599941667,\"node\":0.47499999999999976,\"enable\":0.2105263157894736,\"disable\":0.37999999999999984,\"step\":0.09499999999999996},\"maxNeuron\":201},{\"genes\":[{\"from\":98,\"to\":100000,\"weight\":1.3937106127872194,\"enabled\":true,\"innovation\":143},{\"from\":88,\"to\":100006,\"weight\":0.8113459487360659,\"enabled\":false,\"innovation\":144},{\"from\":1,\"to\":100000,\"weight\":-1.9182714757520538,\"enabled\":true,\"innovation\":764},{\"from\":109,\"to\":100006,\"weight\":-0.7564579416901968,\"enabled\":true,\"innovation\":765},{\"from\":53,\"to\":100003,\"weight\":0.2963903788385265,\"enabled\":false,\"innovation\":1168},{\"from\":138,\"to\":100006,\"weight\":-0.04939120345059411,\"enabled\":true,\"innovation\":1169},{\"from\":100003,\"to\":100004,\"weight\":0.4613999194265004,\"enabled\":true,\"innovation\":1170},{\"from\":72,\"to\":100002,\"weight\":1.7444229005045555,\"enabled\":true,\"innovation\":1627},{\"from\":100,\"to\":100002,\"weight\":-1.1603340328651583,\"enabled\":true,\"innovation\":1628},{\"from\":53,\"to\":201,\"weight\":1,\"enabled\":true,\"innovation\":1629},{\"from\":201,\"to\":100003,\"weight\":1,\"enabled\":true,\"innovation\":1630},{\"from\":174,\"to\":100000,\"weight\":0.7212383255554187,\"enabled\":true,\"innovation\":2433},{\"from\":17,\"to\":100005,\"weight\":-1.361711983077794,\"enabled\":true,\"innovation\":2434},{\"from\":53,\"to\":204,\"weight\":1,\"enabled\":true,\"innovation\":2435},{\"from\":204,\"to\":100003,\"weight\":1,\"enabled\":true,\"innovation\":2436}],\"fitness\":312,\"mutationRates\":{\"connections\":0.21434374999999994,\"link\":2.332701559994167,\"node\":0.4749999999999998,\"enable\":0.18999999999999995,\"disable\":0.3799999999999999,\"step\":0.09499999999999997},\"maxNeuron\":200},{\"genes\":[{\"from\":98,\"to\":100000,\"weight\":1.3937106127872194,\"enabled\":true,\"innovation\":143},{\"from\":88,\"to\":100006,\"weight\":0.8113459487360659,\"enabled\":false,\"innovation\":144},{\"from\":1,\"to\":100000,\"weight\":-1.9182714757520538,\"enabled\":true,\"innovation\":764},{\"from\":109,\"to\":100006,\"weight\":-0.7564579416901968,\"enabled\":true,\"innovation\":765},{\"from\":53,\"to\":100003,\"weight\":0.2963903788385265,\"enabled\":false,\"innovation\":1168},{\"from\":138,\"to\":100006,\"weight\":-0.04939120345059411,\"enabled\":true,\"innovation\":1169},{\"from\":100003,\"to\":100004,\"weight\":0.4613999194265004,\"enabled\":true,\"innovation\":1170},{\"from\":72,\"to\":100002,\"weight\":1.7444229005045555,\"enabled\":true,\"innovation\":1627},{\"from\":100,\"to\":100002,\"weight\":-1.1603340328651583,\"enabled\":true,\"innovation\":1628},{\"from\":53,\"to\":201,\"weight\":1,\"enabled\":false,\"innovation\":1629},{\"from\":201,\"to\":100003,\"weight\":1,\"enabled\":true,\"innovation\":1630},{\"from\":174,\"to\":100000,\"weight\":0.7212383255554187,\"enabled\":true,\"innovation\":2433},{\"from\":17,\"to\":100005,\"weight\":-1.361711983077794,\"enabled\":true,\"innovation\":2434},{\"from\":53,\"to\":204,\"weight\":1,\"enabled\":true,\"innovation\":2435},{\"from\":204,\"to\":100003,\"weight\":1,\"enabled\":true,\"innovation\":2436},{\"from\":100000,\"to\":100005,\"weight\":-1.8673801631784075,\"enabled\":true,\"innovation\":3720},{\"from\":25,\"to\":100006,\"weight\":1.5239105305932759,\"enabled\":true,\"innovation\":3721},{\"from\":53,\"to\":201,\"weight\":1,\"enabled\":true,\"innovation\":3722},{\"from\":201,\"to\":201,\"weight\":1,\"enabled\":true,\"innovation\":3723}],\"fitness\":311,\"mutationRates\":{\"connections\":0.20362656249999994,\"link\":2.2160664819944587,\"node\":0.4512499999999998,\"enable\":0.19999999999999993,\"disable\":0.39999999999999986,\"step\":0.09024999999999997},\"maxNeuron\":201},{\"genes\":[{\"from\":98,\"to\":100000,\"weight\":1.2250964078309345,\"enabled\":false,\"innovation\":143},{\"from\":88,\"to\":100006,\"weight\":-0.4549896239583002,\"enabled\":false,\"innovation\":144},{\"from\":34,\"to\":100000,\"weight\":0.20353694543316017,\"enabled\":true,\"innovation\":537},{\"from\":130,\"to\":100006,\"weight\":-1.765702907931241,\"enabled\":true,\"innovation\":538},{\"from\":168,\"to\":100000,\"weight\":-1.346112208271007,\"enabled\":true,\"innovation\":539},{\"from\":16,\"to\":100006,\"weight\":0.7715120860963097,\"enabled\":false,\"innovation\":746},{\"from\":163,\"to\":100004,\"weight\":-0.9148604667220822,\"enabled\":true,\"innovation\":747},{\"from\":135,\"to\":100003,\"weight\":-1.1596369967335904,\"enabled\":true,\"innovation\":2231},{\"from\":188,\"to\":100006,\"weight\":1.8868890462073544,\"enabled\":true,\"innovation\":2232},{\"from\":54,\"to\":100003,\"weight\":-0.3105491367288842,\"enabled\":false,\"innovation\":2837},{\"from\":101,\"to\":100000,\"weight\":-1.8889053580002413,\"enabled\":true,\"innovation\":2838},{\"from\":54,\"to\":201,\"weight\":1,\"enabled\":true,\"innovation\":2839},{\"from\":201,\"to\":100003,\"weight\":1,\"enabled\":true,\"innovation\":2840}],\"fitness\":274,\"mutationRates\":{\"connections\":0.2374999999999999,\"link\":2.105263157894736,\"node\":0.47499999999999987,\"enable\":0.21052631578947362,\"disable\":0.3799999999999999,\"step\":0.10526315789473681},\"maxNeuron\":201},{\"genes\":[{\"from\":98,\"to\":100000,\"weight\":1.2866090115572624,\"enabled\":false,\"innovation\":143},{\"from\":88,\"to\":100006,\"weight\":-0.45174874665224785,\"enabled\":false,\"innovation\":144},{\"from\":34,\"to\":100000,\"weight\":0.153925889655123,\"enabled\":true,\"innovation\":537},{\"from\":130,\"to\":100006,\"weight\":-1.7573736276119973,\"enabled\":true,\"innovation\":538},{\"from\":168,\"to\":100000,\"weight\":0.8319766540875125,\"enabled\":true,\"innovation\":539},{\"from\":16,\"to\":100006,\"weight\":0.8250452388340079,\"enabled\":true,\"innovation\":746},{\"from\":163,\"to\":100004,\"weight\":-0.8741349347433696,\"enabled\":false,\"innovation\":747},{\"from\":193,\"to\":100004,\"weight\":-1.3728621558944338,\"enabled\":true,\"innovation\":2869},{\"from\":173,\"to\":100000,\"weight\":1.9963689972344119,\"enabled\":true,\"innovation\":2870},{\"from\":163,\"to\":205,\"weight\":1,\"enabled\":true,\"innovation\":2871},{\"from\":205,\"to\":100004,\"weight\":1,\"enabled\":true,\"innovation\":2872}],\"fitness\":274,\"mutationRates\":{\"connections\":0.2770083102493074,\"link\":1.9999999999999993,\"node\":0.45124999999999993,\"enable\":0.19999999999999996,\"disable\":0.3999999999999999,\"step\":0.11080332409972296},\"maxNeuron\":205},{\"genes\":[{\"from\":98,\"to\":100000,\"weight\":0.6469813936772324,\"enabled\":false,\"innovation\":143},{\"from\":88,\"to\":100006,\"weight\":-0.5406144176994852,\"enabled\":false,\"innovation\":144},{\"from\":34,\"to\":100000,\"weight\":0.2059477918926721,\"enabled\":true,\"innovation\":537},{\"from\":130,\"to\":100006,\"weight\":-1.8540697972991516,\"enabled\":true,\"innovation\":538},{\"from\":168,\"to\":100000,\"weight\":-1.4085021811668623,\"enabled\":true,\"innovation\":539},{\"from\":16,\"to\":100006,\"weight\":0.8819791048489324,\"enabled\":true,\"innovation\":746},{\"from\":163,\"to\":100004,\"weight\":-0.9653701894187969,\"enabled\":true,\"innovation\":747},{\"from\":39,\"to\":100001,\"weight\":0.7158964346850256,\"enabled\":true,\"innovation\":1789},{\"from\":10,\"to\":100002,\"weight\":1.832980008501421,\"enabled\":true,\"innovation\":1790}],\"fitness\":274,\"mutationRates\":{\"connections\":0.2770083102493074,\"link\":1.9999999999999993,\"node\":0.45124999999999993,\"enable\":0.19999999999999996,\"disable\":0.36099999999999993,\"step\":0.09999999999999998},\"maxNeuron\":200},{\"genes\":[{\"from\":98,\"to\":100000,\"weight\":1.151959657207065,\"enabled\":false,\"innovation\":143},{\"from\":88,\"to\":100006,\"weight\":-0.4369169595957098,\"enabled\":false,\"innovation\":144},{\"from\":34,\"to\":100000,\"weight\":0.19788764101738843,\"enabled\":true,\"innovation\":537},{\"from\":130,\"to\":100006,\"weight\":-1.8274367858199658,\"enabled\":true,\"innovation\":538},{\"from\":168,\"to\":100000,\"weight\":-1.2652237559613806,\"enabled\":true,\"innovation\":539},{\"from\":16,\"to\":100006,\"weight\":0.7417373508778234,\"enabled\":false,\"innovation\":746},{\"from\":163,\"to\":100004,\"weight\":-0.9688302757323707,\"enabled\":true,\"innovation\":747},{\"from\":135,\"to\":100003,\"weight\":-1.2529079676627148,\"enabled\":true,\"innovation\":2231},{\"from\":188,\"to\":100006,\"weight\":-0.13597480835993903,\"enabled\":true,\"innovation\":2232},{\"from\":54,\"to\":100003,\"weight\":-0.24542662569164359,\"enabled\":false,\"innovation\":2837},{\"from\":101,\"to\":100000,\"weight\":-1.9416580375435486,\"enabled\":true,\"innovation\":2838},{\"from\":54,\"to\":201,\"weight\":0.9159799014537972,\"enabled\":true,\"innovation\":2839},{\"from\":201,\"to\":100003,\"weight\":0.9813450316544331,\"enabled\":true,\"innovation\":2840},{\"from\":138,\"to\":100005,\"weight\":-1.0273493840884012,\"enabled\":true,\"innovation\":3276},{\"from\":41,\"to\":100003,\"weight\":0.4525614652010921,\"enabled\":true,\"innovation\":3277},{\"from\":64,\"to\":100005,\"weight\":-0.43550540128187887,\"enabled\":true,\"innovation\":3278}],\"fitness\":274,\"mutationRates\":{\"connections\":0.2256249999999999,\"link\":2.2160664819944587,\"node\":0.49999999999999983,\"enable\":0.19999999999999993,\"disable\":0.39999999999999986,\"step\":0.09999999999999996},\"maxNeuron\":205},{\"genes\":[{\"from\":98,\"to\":100000,\"weight\":1.3862520452446343,\"enabled\":false,\"innovation\":143},{\"from\":88,\"to\":100006,\"weight\":-0.4549896239583002,\"enabled\":false,\"innovation\":144},{\"from\":34,\"to\":100000,\"weight\":0.20353694543316017,\"enabled\":true,\"innovation\":537},{\"from\":130,\"to\":100006,\"weight\":-1.765702907931241,\"enabled\":true,\"innovation\":538},{\"from\":168,\"to\":100000,\"weight\":-1.346112208271007,\"enabled\":true,\"innovation\":539},{\"from\":16,\"to\":100006,\"weight\":0.7715120860963097,\"enabled\":false,\"innovation\":746},{\"from\":163,\"to\":100004,\"weight\":-0.9148604667220822,\"enabled\":true,\"innovation\":747},{\"from\":135,\"to\":100003,\"weight\":-1.1596369967335904,\"enabled\":true,\"innovation\":2231},{\"from\":188,\"to\":100006,\"weight\":1.8868890462073544,\"enabled\":true,\"innovation\":2232},{\"from\":54,\"to\":100003,\"weight\":-0.3105491367288842,\"enabled\":false,\"innovation\":2837},{\"from\":101,\"to\":100000,\"weight\":-1.8889053580002413,\"enabled\":true,\"innovation\":2838},{\"from\":54,\"to\":201,\"weight\":1,\"enabled\":true,\"innovation\":2839},{\"from\":201,\"to\":100003,\"weight\":1,\"enabled\":true,\"innovation\":2840},{\"from\":194,\"to\":100001,\"weight\":-1.5798145972637485,\"enabled\":true,\"innovation\":3714},{\"from\":34,\"to\":100005,\"weight\":1.8163267824668017,\"enabled\":true,\"innovation\":3715}],\"fitness\":274,\"mutationRates\":{\"connections\":0.2499999999999999,\"link\":2.2160664819944587,\"node\":0.49999999999999983,\"enable\":0.19999999999999993,\"disable\":0.3609999999999999,\"step\":0.11080332409972295},\"maxNeuron\":204},{\"genes\":[{\"from\":98,\"to\":100000,\"weight\":1.2866090115572624,\"enabled\":false,\"innovation\":143},{\"from\":88,\"to\":100006,\"weight\":-0.45174874665224785,\"enabled\":false,\"innovation\":144},{\"from\":34,\"to\":100000,\"weight\":0.153925889655123,\"enabled\":true,\"innovation\":537},{\"from\":130,\"to\":100006,\"weight\":-1.7573736276119973,\"enabled\":true,\"innovation\":538},{\"from\":168,\"to\":100000,\"weight\":0.8319766540875125,\"enabled\":true,\"innovation\":539},{\"from\":16,\"to\":100006,\"weight\":0.8250452388340079,\"enabled\":true,\"innovation\":746},{\"from\":163,\"to\":100004,\"weight\":-0.8741349347433696,\"enabled\":true,\"innovation\":747},{\"from\":47,\"to\":100001,\"weight\":-1.600874716891198,\"enabled\":true,\"innovation\":4112},{\"from\":193,\"to\":100000,\"weight\":-1.9232082585987902,\"enabled\":true,\"innovation\":4113}],\"fitness\":274,\"mutationRates\":{\"connections\":0.2770083102493074,\"link\":1.9999999999999993,\"node\":0.4999999999999999,\"enable\":0.19999999999999996,\"disable\":0.3999999999999999,\"step\":0.11080332409972296},\"maxNeuron\":200},{\"genes\":[{\"from\":98,\"to\":100000,\"weight\":1.151959657207065,\"enabled\":false,\"innovation\":143},{\"from\":88,\"to\":100006,\"weight\":-0.4369169595957098,\"enabled\":false,\"innovation\":144},{\"from\":34,\"to\":100000,\"weight\":0.19788764101738843,\"enabled\":true,\"innovation\":537},{\"from\":130,\"to\":100006,\"weight\":-1.7573736276119973,\"enabled\":true,\"innovation\":538},{\"from\":168,\"to\":100000,\"weight\":-1.2652237559613806,\"enabled\":true,\"innovation\":539},{\"from\":16,\"to\":100006,\"weight\":0.7417373508778234,\"enabled\":false,\"innovation\":746},{\"from\":163,\"to\":100004,\"weight\":-0.9688302757323707,\"enabled\":true,\"innovation\":747},{\"from\":135,\"to\":100003,\"weight\":-1.2529079676627148,\"enabled\":true,\"innovation\":2231},{\"from\":188,\"to\":100006,\"weight\":-0.13597480835993903,\"enabled\":true,\"innovation\":2232},{\"from\":54,\"to\":100003,\"weight\":-0.24542662569164359,\"enabled\":false,\"innovation\":2837},{\"from\":101,\"to\":100000,\"weight\":-1.9416580375435486,\"enabled\":true,\"innovation\":2838},{\"from\":54,\"to\":201,\"weight\":0.9159799014537972,\"enabled\":true,\"innovation\":2839},{\"from\":201,\"to\":100003,\"weight\":0.9813450316544331,\"enabled\":true,\"innovation\":2840},{\"from\":138,\"to\":100005,\"weight\":-1.0273493840884012,\"enabled\":true,\"innovation\":3276},{\"from\":41,\"to\":100003,\"weight\":0.4525614652010921,\"enabled\":true,\"innovation\":3277},{\"from\":64,\"to\":100005,\"weight\":-0.43550540128187887,\"enabled\":false,\"innovation\":3278},{\"from\":100000,\"to\":100003,\"weight\":0.4224793623474872,\"enabled\":true,\"innovation\":4114},{\"from\":65,\"to\":100005,\"weight\":1.0351711839670603,\"enabled\":true,\"innovation\":4115},{\"from\":64,\"to\":206,\"weight\":1,\"enabled\":false,\"innovation\":4116},{\"from\":206,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":4117}],\"fitness\":274,\"mutationRates\":{\"connections\":0.23749999999999988,\"link\":2.3327015599941667,\"node\":0.4749999999999998,\"enable\":0.2105263157894736,\"disable\":0.37999999999999984,\"step\":0.09499999999999996},\"maxNeuron\":206},{\"genes\":[{\"from\":98,\"to\":100000,\"weight\":1.2866090115572624,\"enabled\":false,\"innovation\":143},{\"from\":88,\"to\":100006,\"weight\":-0.45174874665224785,\"enabled\":false,\"innovation\":144},{\"from\":34,\"to\":100000,\"weight\":0.153925889655123,\"enabled\":true,\"innovation\":537},{\"from\":130,\"to\":100006,\"weight\":-1.7573736276119973,\"enabled\":true,\"innovation\":538},{\"from\":168,\"to\":100000,\"weight\":0.8319766540875125,\"enabled\":true,\"innovation\":539},{\"from\":16,\"to\":100006,\"weight\":0.8250452388340079,\"enabled\":true,\"innovation\":746},{\"from\":163,\"to\":100004,\"weight\":-0.8741349347433696,\"enabled\":true,\"innovation\":747}],\"fitness\":264,\"mutationRates\":{\"connections\":0.26315789473684204,\"link\":2.1052631578947363,\"node\":0.4749999999999999,\"enable\":0.21052631578947364,\"disable\":0.37999999999999995,\"step\":0.10526315789473682},\"maxNeuron\":200},{\"genes\":[{\"from\":98,\"to\":100000,\"weight\":1.2633973722077088,\"enabled\":false,\"innovation\":143},{\"from\":88,\"to\":100006,\"weight\":-1.323543710719802,\"enabled\":false,\"innovation\":144},{\"from\":34,\"to\":100000,\"weight\":0.10228614227455582,\"enabled\":true,\"innovation\":537},{\"from\":130,\"to\":100006,\"weight\":-1.8631550369363417,\"enabled\":true,\"innovation\":538},{\"from\":168,\"to\":100000,\"weight\":0.922511516196512,\"enabled\":true,\"innovation\":539},{\"from\":16,\"to\":100006,\"weight\":0.8257075979447912,\"enabled\":true,\"innovation\":746},{\"from\":163,\"to\":100004,\"weight\":-0.9019794021811165,\"enabled\":true,\"innovation\":747},{\"from\":18,\"to\":100006,\"weight\":-1.7687885818923874,\"enabled\":true,\"innovation\":2255},{\"from\":93,\"to\":100004,\"weight\":-0.7119118917312353,\"enabled\":true,\"innovation\":2256}],\"fitness\":100,\"mutationRates\":{\"connections\":0.2770083102493074,\"link\":1.9999999999999993,\"node\":0.4999999999999999,\"enable\":0.22160664819944592,\"disable\":0.36099999999999993,\"step\":0.11080332409972296},\"maxNeuron\":200},{\"genes\":[{\"from\":98,\"to\":100000,\"weight\":1.4704832628898663,\"enabled\":true,\"innovation\":143},{\"from\":88,\"to\":100006,\"weight\":0.8104893053743366,\"enabled\":false,\"innovation\":144},{\"from\":1,\"to\":100000,\"weight\":-1.8767770628225315,\"enabled\":true,\"innovation\":764},{\"from\":109,\"to\":100006,\"weight\":-0.735615296312234,\"enabled\":true,\"innovation\":765},{\"from\":53,\"to\":100003,\"weight\":0.2467021400134687,\"enabled\":false,\"innovation\":1168},{\"from\":138,\"to\":100006,\"weight\":-0.0003601458779222133,\"enabled\":true,\"innovation\":1169},{\"from\":100003,\"to\":100004,\"weight\":0.39217188556481763,\"enabled\":true,\"innovation\":1170},{\"from\":72,\"to\":100002,\"weight\":1.8208518506170912,\"enabled\":true,\"innovation\":1627},{\"from\":100,\"to\":100002,\"weight\":-1.17985629356908,\"enabled\":true,\"innovation\":1628},{\"from\":53,\"to\":201,\"weight\":1.012255594417736,\"enabled\":false,\"innovation\":1629},{\"from\":201,\"to\":100003,\"weight\":0.9416690427597314,\"enabled\":true,\"innovation\":1630},{\"from\":174,\"to\":100000,\"weight\":0.6533077326107785,\"enabled\":true,\"innovation\":2433},{\"from\":17,\"to\":100005,\"weight\":-1.4031612529197013,\"enabled\":true,\"innovation\":2434},{\"from\":53,\"to\":204,\"weight\":1.0582478400086466,\"enabled\":true,\"innovation\":2435},{\"from\":204,\"to\":100003,\"weight\":1.0809044721126422,\"enabled\":true,\"innovation\":2436},{\"from\":100001,\"to\":100005,\"weight\":1.1105730673453413,\"enabled\":true,\"innovation\":3055},{\"from\":21,\"to\":100005,\"weight\":0.8008634501968066,\"enabled\":true,\"innovation\":3056},{\"from\":53,\"to\":201,\"weight\":1,\"enabled\":true,\"innovation\":3057},{\"from\":201,\"to\":201,\"weight\":1,\"enabled\":true,\"innovation\":3058}],\"fitness\":100,\"mutationRates\":{\"connections\":0.20362656249999994,\"link\":2.4554753263096494,\"node\":0.4512499999999998,\"enable\":0.19999999999999993,\"disable\":0.39999999999999986,\"step\":0.09024999999999997},\"maxNeuron\":201},{\"genes\":[{\"from\":98,\"to\":100000,\"weight\":0.6469813936772324,\"enabled\":false,\"innovation\":143},{\"from\":88,\"to\":100006,\"weight\":-0.5406144176994852,\"enabled\":false,\"innovation\":144},{\"from\":34,\"to\":100000,\"weight\":0.2059477918926721,\"enabled\":true,\"innovation\":537},{\"from\":130,\"to\":100006,\"weight\":-1.8540697972991516,\"enabled\":true,\"innovation\":538},{\"from\":168,\"to\":100000,\"weight\":-1.4085021811668623,\"enabled\":true,\"innovation\":539},{\"from\":16,\"to\":100006,\"weight\":0.8819791048489324,\"enabled\":true,\"innovation\":746},{\"from\":163,\"to\":100004,\"weight\":-0.9653701894187969,\"enabled\":false,\"innovation\":747},{\"from\":39,\"to\":100001,\"weight\":0.7158964346850256,\"enabled\":false,\"innovation\":1789},{\"from\":10,\"to\":100002,\"weight\":1.832980008501421,\"enabled\":true,\"innovation\":1790},{\"from\":144,\"to\":100001,\"weight\":-1.1199890646225885,\"enabled\":true,\"innovation\":3487},{\"from\":163,\"to\":207,\"weight\":1,\"enabled\":true,\"innovation\":3488},{\"from\":207,\"to\":100004,\"weight\":1,\"enabled\":true,\"innovation\":3489}],\"fitness\":100,\"mutationRates\":{\"connections\":0.2915876949992709,\"link\":1.8999999999999992,\"node\":0.4749999999999999,\"enable\":0.18999999999999995,\"disable\":0.3429499999999999,\"step\":0.09499999999999997},\"maxNeuron\":200},{\"genes\":[{\"from\":98,\"to\":100000,\"weight\":1.3937106127872194,\"enabled\":true,\"innovation\":143},{\"from\":88,\"to\":100006,\"weight\":0.8113459487360659,\"enabled\":false,\"innovation\":144},{\"from\":1,\"to\":100000,\"weight\":-1.9182714757520538,\"enabled\":true,\"innovation\":764},{\"from\":109,\"to\":100006,\"weight\":-0.7564579416901968,\"enabled\":true,\"innovation\":765},{\"from\":53,\"to\":100003,\"weight\":0.2963903788385265,\"enabled\":false,\"innovation\":1168},{\"from\":138,\"to\":100006,\"weight\":-0.04939120345059411,\"enabled\":true,\"innovation\":1169},{\"from\":100003,\"to\":100004,\"weight\":0.4613999194265004,\"enabled\":true,\"innovation\":1170},{\"from\":72,\"to\":100002,\"weight\":1.7444229005045555,\"enabled\":true,\"innovation\":1627},{\"from\":100,\"to\":100002,\"weight\":-1.1603340328651583,\"enabled\":true,\"innovation\":1628},{\"from\":53,\"to\":201,\"weight\":1,\"enabled\":true,\"innovation\":1629},{\"from\":201,\"to\":100003,\"weight\":1,\"enabled\":true,\"innovation\":1630},{\"from\":174,\"to\":100000,\"weight\":0.7212383255554187,\"enabled\":true,\"innovation\":2433},{\"from\":17,\"to\":100005,\"weight\":-1.361711983077794,\"enabled\":true,\"innovation\":2434},{\"from\":53,\"to\":204,\"weight\":1,\"enabled\":true,\"innovation\":2435},{\"from\":204,\"to\":100003,\"weight\":1,\"enabled\":true,\"innovation\":2436},{\"from\":164,\"to\":100005,\"weight\":-1.2651857399278272,\"enabled\":true,\"innovation\":3701},{\"from\":143,\"to\":100002,\"weight\":-0.16449423570549992,\"enabled\":true,\"innovation\":3702}],\"fitness\":94,\"mutationRates\":{\"connections\":0.22562499999999994,\"link\":2.4554753263096494,\"node\":0.4999999999999998,\"enable\":0.19999999999999993,\"disable\":0.39999999999999986,\"step\":0.09999999999999996},\"maxNeuron\":200},{\"genes\":[{\"from\":98,\"to\":100000,\"weight\":1.2866090115572624,\"enabled\":false,\"innovation\":143},{\"from\":88,\"to\":100006,\"weight\":-0.45174874665224785,\"enabled\":false,\"innovation\":144},{\"from\":34,\"to\":100000,\"weight\":0.153925889655123,\"enabled\":true,\"innovation\":537},{\"from\":130,\"to\":100006,\"weight\":-1.7573736276119973,\"enabled\":true,\"innovation\":538},{\"from\":168,\"to\":100000,\"weight\":0.8319766540875125,\"enabled\":true,\"innovation\":539},{\"from\":16,\"to\":100006,\"weight\":0.8250452388340079,\"enabled\":true,\"innovation\":746},{\"from\":163,\"to\":100004,\"weight\":-0.8741349347433696,\"enabled\":true,\"innovation\":747}],\"fitness\":84,\"mutationRates\":{\"connections\":0.26315789473684204,\"link\":2.1052631578947363,\"node\":0.4749999999999999,\"enable\":0.21052631578947364,\"disable\":0.37999999999999995,\"step\":0.10526315789473682},\"maxNeuron\":200},{\"genes\":[{\"from\":98,\"to\":100000,\"weight\":1.3937106127872194,\"enabled\":true,\"innovation\":143},{\"from\":88,\"to\":100006,\"weight\":0.8113459487360659,\"enabled\":false,\"innovation\":144},{\"from\":1,\"to\":100000,\"weight\":-1.9182714757520538,\"enabled\":true,\"innovation\":764},{\"from\":109,\"to\":100006,\"weight\":-0.7564579416901968,\"enabled\":true,\"innovation\":765},{\"from\":53,\"to\":100003,\"weight\":0.2963903788385265,\"enabled\":false,\"innovation\":1168},{\"from\":138,\"to\":100006,\"weight\":-0.04939120345059411,\"enabled\":true,\"innovation\":1169},{\"from\":100003,\"to\":100004,\"weight\":0.4613999194265004,\"enabled\":true,\"innovation\":1170},{\"from\":72,\"to\":100002,\"weight\":1.7444229005045555,\"enabled\":true,\"innovation\":1627},{\"from\":100,\"to\":100002,\"weight\":-1.1603340328651583,\"enabled\":true,\"innovation\":1628},{\"from\":53,\"to\":201,\"weight\":1,\"enabled\":false,\"innovation\":1629},{\"from\":201,\"to\":100003,\"weight\":1,\"enabled\":true,\"innovation\":1630},{\"from\":174,\"to\":100000,\"weight\":0.7212383255554187,\"enabled\":true,\"innovation\":2433},{\"from\":17,\"to\":100005,\"weight\":-1.361711983077794,\"enabled\":true,\"innovation\":2434},{\"from\":53,\"to\":204,\"weight\":1,\"enabled\":true,\"innovation\":2435},{\"from\":204,\"to\":100003,\"weight\":1,\"enabled\":true,\"innovation\":2436},{\"from\":100000,\"to\":100005,\"weight\":-1.8673801631784075,\"enabled\":true,\"innovation\":3720},{\"from\":25,\"to\":100006,\"weight\":1.5239105305932759,\"enabled\":true,\"innovation\":3721},{\"from\":53,\"to\":201,\"weight\":1,\"enabled\":true,\"innovation\":3722},{\"from\":201,\"to\":201,\"weight\":1,\"enabled\":true,\"innovation\":3723}],\"fitness\":75,\"mutationRates\":{\"connections\":0.20362656249999994,\"link\":2.2160664819944587,\"node\":0.4512499999999998,\"enable\":0.19999999999999993,\"disable\":0.39999999999999986,\"step\":0.09024999999999997},\"maxNeuron\":200}];\n\n//# sourceURL=webpack:///./species-1.json?");

/***/ }),

/***/ "./species-2.json":
/*!************************!*\
  !*** ./species-2.json ***!
  \************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, default */
/***/ (function(module) {

eval("module.exports = [{\"genes\":[{\"from\":166,\"to\":100004,\"weight\":0.8630208732141286,\"enabled\":false,\"innovation\":125},{\"from\":105,\"to\":100003,\"weight\":-1.93413143264288,\"enabled\":false,\"innovation\":126},{\"from\":166,\"to\":201,\"weight\":0.9718099590665216,\"enabled\":true,\"innovation\":127},{\"from\":201,\"to\":100004,\"weight\":0.9674881487469477,\"enabled\":true,\"innovation\":128},{\"from\":163,\"to\":100005,\"weight\":0.024276552819210373,\"enabled\":true,\"innovation\":724},{\"from\":132,\"to\":100006,\"weight\":-0.13194646261404053,\"enabled\":true,\"innovation\":725},{\"from\":105,\"to\":201,\"weight\":1,\"enabled\":true,\"innovation\":726},{\"from\":201,\"to\":100003,\"weight\":1,\"enabled\":true,\"innovation\":727},{\"from\":69,\"to\":100003,\"weight\":-1.7473725166651013,\"enabled\":true,\"innovation\":2213},{\"from\":63,\"to\":100006,\"weight\":0.18842228822408202,\"enabled\":true,\"innovation\":2214}],\"fitness\":304,\"mutationRates\":{\"connections\":0.2375,\"link\":2.1052631578947363,\"node\":0.42868749999999994,\"enable\":0.21052631578947364,\"disable\":0.4210526315789473,\"step\":0.10526315789473682},\"maxNeuron\":200},{\"genes\":[{\"from\":54,\"to\":100001,\"weight\":-0.7406974245505166,\"enabled\":true,\"innovation\":129},{\"from\":53,\"to\":100004,\"weight\":1.8185932106699052,\"enabled\":true,\"innovation\":130},{\"from\":72,\"to\":100001,\"weight\":-1.0026509932986394,\"enabled\":false,\"innovation\":277},{\"from\":193,\"to\":100002,\"weight\":0.049945016980229004,\"enabled\":false,\"innovation\":278},{\"from\":72,\"to\":202,\"weight\":1.0271846280433425,\"enabled\":true,\"innovation\":279},{\"from\":202,\"to\":100001,\"weight\":0.9974550378797422,\"enabled\":true,\"innovation\":280},{\"from\":86,\"to\":100002,\"weight\":1.718466353419756,\"enabled\":true,\"innovation\":281},{\"from\":156,\"to\":100004,\"weight\":-1.2195171036438879,\"enabled\":true,\"innovation\":282},{\"from\":193,\"to\":203,\"weight\":0.9777543195558692,\"enabled\":true,\"innovation\":283},{\"from\":203,\"to\":100002,\"weight\":1,\"enabled\":false,\"innovation\":284},{\"from\":133,\"to\":100001,\"weight\":-1.8415309025326012,\"enabled\":true,\"innovation\":298},{\"from\":165,\"to\":100001,\"weight\":-1.3764243881557388,\"enabled\":true,\"innovation\":299},{\"from\":203,\"to\":204,\"weight\":1,\"enabled\":true,\"innovation\":300},{\"from\":204,\"to\":100002,\"weight\":1,\"enabled\":true,\"innovation\":301},{\"from\":1,\"to\":100005,\"weight\":1.976586923834125,\"enabled\":false,\"innovation\":1538},{\"from\":88,\"to\":100000,\"weight\":0.34035629597415795,\"enabled\":true,\"innovation\":1539},{\"from\":24,\"to\":100000,\"weight\":0.3088286128771136,\"enabled\":true,\"innovation\":1769},{\"from\":50,\"to\":100002,\"weight\":-0.3122514732708348,\"enabled\":false,\"innovation\":1770},{\"from\":96,\"to\":100006,\"weight\":-1.7141282399420197,\"enabled\":true,\"innovation\":1771},{\"from\":1,\"to\":210,\"weight\":1,\"enabled\":true,\"innovation\":1772},{\"from\":210,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":1773},{\"from\":123,\"to\":100002,\"weight\":0.6647002291090667,\"enabled\":true,\"innovation\":2825},{\"from\":166,\"to\":100001,\"weight\":1.8549366268081595,\"enabled\":true,\"innovation\":2826}],\"fitness\":304,\"mutationRates\":{\"connections\":0.23749999999999996,\"link\":2.584710869799631,\"node\":0.47499999999999976,\"enable\":0.18999999999999992,\"disable\":0.46654031199883345,\"step\":0.1052631578947368},\"maxNeuron\":200},{\"genes\":[{\"from\":54,\"to\":100001,\"weight\":-0.7406974245505166,\"enabled\":true,\"innovation\":129},{\"from\":53,\"to\":100004,\"weight\":1.8185932106699052,\"enabled\":true,\"innovation\":130},{\"from\":72,\"to\":100001,\"weight\":-1.0026509932986394,\"enabled\":false,\"innovation\":277},{\"from\":193,\"to\":100002,\"weight\":0.049945016980229004,\"enabled\":false,\"innovation\":278},{\"from\":72,\"to\":202,\"weight\":1.0271846280433425,\"enabled\":true,\"innovation\":279},{\"from\":202,\"to\":100001,\"weight\":1.0251340750244362,\"enabled\":true,\"innovation\":280},{\"from\":86,\"to\":100002,\"weight\":1.6761510589339117,\"enabled\":true,\"innovation\":281},{\"from\":156,\"to\":100004,\"weight\":-1.9854634881232633,\"enabled\":true,\"innovation\":282},{\"from\":193,\"to\":203,\"weight\":0.9777543195558692,\"enabled\":true,\"innovation\":283},{\"from\":203,\"to\":100002,\"weight\":1,\"enabled\":false,\"innovation\":284},{\"from\":133,\"to\":100001,\"weight\":-1.8415309025326012,\"enabled\":true,\"innovation\":298},{\"from\":165,\"to\":100001,\"weight\":-1.3764243881557388,\"enabled\":true,\"innovation\":299},{\"from\":203,\"to\":204,\"weight\":1,\"enabled\":true,\"innovation\":300},{\"from\":204,\"to\":100002,\"weight\":1,\"enabled\":true,\"innovation\":301},{\"from\":1,\"to\":100005,\"weight\":1.976586923834125,\"enabled\":false,\"innovation\":1538},{\"from\":88,\"to\":100000,\"weight\":0.34035629597415795,\"enabled\":true,\"innovation\":1539},{\"from\":24,\"to\":100000,\"weight\":0.3088286128771136,\"enabled\":true,\"innovation\":1769},{\"from\":50,\"to\":100002,\"weight\":-0.3122514732708348,\"enabled\":false,\"innovation\":1770},{\"from\":96,\"to\":100006,\"weight\":-1.7141282399420197,\"enabled\":true,\"innovation\":1771},{\"from\":1,\"to\":210,\"weight\":1,\"enabled\":true,\"innovation\":1772},{\"from\":210,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":1773}],\"fitness\":302,\"mutationRates\":{\"connections\":0.24999999999999997,\"link\":2.4554753263096494,\"node\":0.4512499999999998,\"enable\":0.19999999999999993,\"disable\":0.4432132963988918,\"step\":0.09999999999999996},\"maxNeuron\":210},{\"genes\":[{\"from\":54,\"to\":100001,\"weight\":-0.7406974245505166,\"enabled\":true,\"innovation\":129},{\"from\":53,\"to\":100004,\"weight\":1.8185932106699052,\"enabled\":true,\"innovation\":130},{\"from\":72,\"to\":100001,\"weight\":-1.0026509932986394,\"enabled\":false,\"innovation\":277},{\"from\":193,\"to\":100002,\"weight\":0.049945016980229004,\"enabled\":false,\"innovation\":278},{\"from\":72,\"to\":202,\"weight\":1.0271846280433425,\"enabled\":true,\"innovation\":279},{\"from\":202,\"to\":100001,\"weight\":1.0251340750244362,\"enabled\":true,\"innovation\":280},{\"from\":86,\"to\":100002,\"weight\":1.6761510589339117,\"enabled\":true,\"innovation\":281},{\"from\":156,\"to\":100004,\"weight\":-1.9854634881232633,\"enabled\":true,\"innovation\":282},{\"from\":193,\"to\":203,\"weight\":0.9777543195558692,\"enabled\":true,\"innovation\":283},{\"from\":203,\"to\":100002,\"weight\":1,\"enabled\":false,\"innovation\":284},{\"from\":133,\"to\":100001,\"weight\":-1.8415309025326012,\"enabled\":true,\"innovation\":298},{\"from\":165,\"to\":100001,\"weight\":-1.3764243881557388,\"enabled\":true,\"innovation\":299},{\"from\":203,\"to\":204,\"weight\":1,\"enabled\":true,\"innovation\":300},{\"from\":204,\"to\":100002,\"weight\":1,\"enabled\":true,\"innovation\":301},{\"from\":1,\"to\":100005,\"weight\":1.976586923834125,\"enabled\":false,\"innovation\":1538},{\"from\":88,\"to\":100000,\"weight\":0.34035629597415795,\"enabled\":true,\"innovation\":1539},{\"from\":24,\"to\":100000,\"weight\":0.3088286128771136,\"enabled\":true,\"innovation\":1769},{\"from\":50,\"to\":100002,\"weight\":-0.3122514732708348,\"enabled\":false,\"innovation\":1770},{\"from\":96,\"to\":100006,\"weight\":-1.7141282399420197,\"enabled\":true,\"innovation\":1771},{\"from\":1,\"to\":210,\"weight\":1,\"enabled\":true,\"innovation\":1772},{\"from\":210,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":1773}],\"fitness\":302,\"mutationRates\":{\"connections\":0.24999999999999997,\"link\":2.4554753263096494,\"node\":0.4512499999999998,\"enable\":0.19999999999999993,\"disable\":0.4432132963988918,\"step\":0.09999999999999996},\"maxNeuron\":200},{\"genes\":[{\"from\":54,\"to\":100001,\"weight\":-1.5494089216320512,\"enabled\":true,\"innovation\":129},{\"from\":53,\"to\":100004,\"weight\":1.7890535001775658,\"enabled\":false,\"innovation\":130},{\"from\":72,\"to\":100001,\"weight\":-1.081102999254828,\"enabled\":false,\"innovation\":277},{\"from\":193,\"to\":100002,\"weight\":0.09656190226969576,\"enabled\":false,\"innovation\":278},{\"from\":72,\"to\":202,\"weight\":1.0717667204577503,\"enabled\":true,\"innovation\":279},{\"from\":202,\"to\":100001,\"weight\":1.0544584482736736,\"enabled\":true,\"innovation\":280},{\"from\":86,\"to\":100002,\"weight\":1.5900979518535627,\"enabled\":true,\"innovation\":281},{\"from\":156,\"to\":100004,\"weight\":-1.973107114907637,\"enabled\":true,\"innovation\":282},{\"from\":193,\"to\":203,\"weight\":0.9852771231640474,\"enabled\":true,\"innovation\":283},{\"from\":203,\"to\":100002,\"weight\":1.0737559688886975,\"enabled\":false,\"innovation\":284},{\"from\":133,\"to\":100001,\"weight\":-1.7939327260459672,\"enabled\":true,\"innovation\":298},{\"from\":165,\"to\":100001,\"weight\":-1.4563445374176256,\"enabled\":true,\"innovation\":299},{\"from\":203,\"to\":204,\"weight\":0.9203049813045316,\"enabled\":true,\"innovation\":300},{\"from\":204,\"to\":100002,\"weight\":0.9061982328805609,\"enabled\":true,\"innovation\":301},{\"from\":1,\"to\":100005,\"weight\":1.9472248774338363,\"enabled\":false,\"innovation\":1538},{\"from\":88,\"to\":100000,\"weight\":0.25256771907554254,\"enabled\":true,\"innovation\":1539},{\"from\":24,\"to\":100000,\"weight\":0.35832062650412055,\"enabled\":true,\"innovation\":1769},{\"from\":50,\"to\":100002,\"weight\":-0.28312373354992687,\"enabled\":false,\"innovation\":1770},{\"from\":96,\"to\":100006,\"weight\":-1.7850416043316808,\"enabled\":true,\"innovation\":1771},{\"from\":1,\"to\":210,\"weight\":0.9779692871111949,\"enabled\":true,\"innovation\":1772},{\"from\":210,\"to\":100005,\"weight\":0.9994304869456143,\"enabled\":true,\"innovation\":1773},{\"from\":141,\"to\":100002,\"weight\":0.713829239512715,\"enabled\":true,\"innovation\":3443},{\"from\":91,\"to\":100002,\"weight\":-1.3278454675112785,\"enabled\":true,\"innovation\":3444}],\"fitness\":302,\"mutationRates\":{\"connections\":0.23749999999999996,\"link\":2.3327015599941667,\"node\":0.47499999999999976,\"enable\":0.2105263157894736,\"disable\":0.4210526315789472,\"step\":0.09499999999999996},\"maxNeuron\":210},{\"genes\":[{\"from\":54,\"to\":100001,\"weight\":-0.7719903768139471,\"enabled\":true,\"innovation\":129},{\"from\":53,\"to\":100004,\"weight\":1.922121878778337,\"enabled\":true,\"innovation\":130},{\"from\":72,\"to\":100001,\"weight\":-1.10455575915568,\"enabled\":false,\"innovation\":277},{\"from\":193,\"to\":100002,\"weight\":0.13887084196055566,\"enabled\":false,\"innovation\":278},{\"from\":72,\"to\":202,\"weight\":1.017433430978912,\"enabled\":true,\"innovation\":279},{\"from\":202,\"to\":100001,\"weight\":0.972889020009568,\"enabled\":true,\"innovation\":280},{\"from\":86,\"to\":100002,\"weight\":1.622739850388209,\"enabled\":true,\"innovation\":281},{\"from\":156,\"to\":100004,\"weight\":-0.5360033214744435,\"enabled\":true,\"innovation\":282},{\"from\":193,\"to\":203,\"weight\":1.0740075506571112,\"enabled\":true,\"innovation\":283},{\"from\":203,\"to\":100002,\"weight\":1.0880817941755279,\"enabled\":false,\"innovation\":284},{\"from\":133,\"to\":100001,\"weight\":1.555214349751541,\"enabled\":true,\"innovation\":298},{\"from\":165,\"to\":100001,\"weight\":-1.314112581020789,\"enabled\":true,\"innovation\":299},{\"from\":203,\"to\":204,\"weight\":1.0180951643700922,\"enabled\":true,\"innovation\":300},{\"from\":204,\"to\":100002,\"weight\":1.0199707828963123,\"enabled\":true,\"innovation\":301},{\"from\":1,\"to\":100005,\"weight\":2.059667741299767,\"enabled\":false,\"innovation\":1538},{\"from\":88,\"to\":100000,\"weight\":0.2429466758113743,\"enabled\":true,\"innovation\":1539},{\"from\":24,\"to\":100000,\"weight\":0.2523288469534735,\"enabled\":true,\"innovation\":1769},{\"from\":50,\"to\":100002,\"weight\":-0.2566043263398621,\"enabled\":false,\"innovation\":1770},{\"from\":96,\"to\":100006,\"weight\":-1.8100220776185223,\"enabled\":true,\"innovation\":1771},{\"from\":1,\"to\":210,\"weight\":1.0595060585493583,\"enabled\":true,\"innovation\":1772},{\"from\":210,\"to\":100005,\"weight\":-1.5411595694105502,\"enabled\":true,\"innovation\":1773},{\"from\":6,\"to\":100004,\"weight\":-1.063230239455656,\"enabled\":true,\"innovation\":4077},{\"from\":146,\"to\":100000,\"weight\":1.161689456394849,\"enabled\":true,\"innovation\":4078}],\"fitness\":302,\"mutationRates\":{\"connections\":0.26315789473684204,\"link\":2.584710869799631,\"node\":0.47499999999999976,\"enable\":0.2105263157894736,\"disable\":0.46654031199883345,\"step\":0.1052631578947368},\"maxNeuron\":211},{\"genes\":[{\"from\":54,\"to\":100001,\"weight\":-0.7406974245505166,\"enabled\":true,\"innovation\":129},{\"from\":53,\"to\":100004,\"weight\":1.8185932106699052,\"enabled\":true,\"innovation\":130},{\"from\":72,\"to\":100001,\"weight\":-1.0026509932986394,\"enabled\":false,\"innovation\":277},{\"from\":193,\"to\":100002,\"weight\":0.049945016980229004,\"enabled\":false,\"innovation\":278},{\"from\":72,\"to\":202,\"weight\":1.0271846280433425,\"enabled\":true,\"innovation\":279},{\"from\":202,\"to\":100001,\"weight\":0.9974550378797422,\"enabled\":true,\"innovation\":280},{\"from\":86,\"to\":100002,\"weight\":1.6761510589339117,\"enabled\":true,\"innovation\":281},{\"from\":156,\"to\":100004,\"weight\":-1.9854634881232633,\"enabled\":true,\"innovation\":282},{\"from\":193,\"to\":203,\"weight\":1,\"enabled\":true,\"innovation\":283},{\"from\":203,\"to\":100002,\"weight\":1,\"enabled\":false,\"innovation\":284},{\"from\":133,\"to\":100001,\"weight\":-1.8947697213735957,\"enabled\":true,\"innovation\":298},{\"from\":165,\"to\":100001,\"weight\":-1.3764243881557388,\"enabled\":true,\"innovation\":299},{\"from\":203,\"to\":204,\"weight\":1,\"enabled\":true,\"innovation\":300},{\"from\":204,\"to\":100002,\"weight\":1,\"enabled\":true,\"innovation\":301},{\"from\":1,\"to\":100005,\"weight\":1.976586923834125,\"enabled\":false,\"innovation\":1538},{\"from\":88,\"to\":100000,\"weight\":0.34035629597415795,\"enabled\":true,\"innovation\":1539},{\"from\":24,\"to\":100000,\"weight\":0.3088286128771136,\"enabled\":true,\"innovation\":1769},{\"from\":50,\"to\":100002,\"weight\":-0.3122514732708348,\"enabled\":false,\"innovation\":1770},{\"from\":96,\"to\":100006,\"weight\":-1.7141282399420197,\"enabled\":true,\"innovation\":1771},{\"from\":1,\"to\":210,\"weight\":1,\"enabled\":true,\"innovation\":1772},{\"from\":210,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":1773},{\"from\":104,\"to\":100002,\"weight\":0.24512021103707937,\"enabled\":true,\"innovation\":4094},{\"from\":149,\"to\":100004,\"weight\":-0.8463457402740611,\"enabled\":true,\"innovation\":4095}],\"fitness\":302,\"mutationRates\":{\"connections\":0.26315789473684204,\"link\":2.3327015599941667,\"node\":0.47499999999999976,\"enable\":0.2105263157894736,\"disable\":0.46654031199883345,\"step\":0.09499999999999996},\"maxNeuron\":204},{\"genes\":[{\"from\":54,\"to\":100001,\"weight\":-0.6997019439991818,\"enabled\":true,\"innovation\":129},{\"from\":53,\"to\":100004,\"weight\":1.8758611994066907,\"enabled\":true,\"innovation\":130},{\"from\":72,\"to\":100001,\"weight\":-1.0026509932986394,\"enabled\":false,\"innovation\":277},{\"from\":193,\"to\":100002,\"weight\":0.049945016980229004,\"enabled\":false,\"innovation\":278},{\"from\":72,\"to\":202,\"weight\":0.9457796636229572,\"enabled\":true,\"innovation\":279},{\"from\":202,\"to\":100001,\"weight\":1.0251340750244362,\"enabled\":true,\"innovation\":280},{\"from\":86,\"to\":100002,\"weight\":1.7597447265130315,\"enabled\":true,\"innovation\":281},{\"from\":156,\"to\":100004,\"weight\":-1.2195171036438879,\"enabled\":true,\"innovation\":282},{\"from\":193,\"to\":203,\"weight\":1.0089171996015147,\"enabled\":true,\"innovation\":283},{\"from\":203,\"to\":100002,\"weight\":1,\"enabled\":false,\"innovation\":284},{\"from\":133,\"to\":100001,\"weight\":-1.8947697213735957,\"enabled\":true,\"innovation\":298},{\"from\":165,\"to\":100001,\"weight\":-1.3026563419722665,\"enabled\":true,\"innovation\":299},{\"from\":203,\"to\":204,\"weight\":1.0878307815773332,\"enabled\":true,\"innovation\":300},{\"from\":204,\"to\":100002,\"weight\":0.9960333025752637,\"enabled\":true,\"innovation\":301},{\"from\":1,\"to\":100005,\"weight\":1.976586923834125,\"enabled\":true,\"innovation\":1538},{\"from\":88,\"to\":100000,\"weight\":0.34035629597415795,\"enabled\":true,\"innovation\":1539},{\"from\":24,\"to\":100000,\"weight\":0.3088286128771136,\"enabled\":true,\"innovation\":1769},{\"from\":50,\"to\":100002,\"weight\":-0.3122514732708348,\"enabled\":false,\"innovation\":1770},{\"from\":96,\"to\":100006,\"weight\":-1.7141282399420197,\"enabled\":true,\"innovation\":1771},{\"from\":1,\"to\":210,\"weight\":1,\"enabled\":true,\"innovation\":1772},{\"from\":210,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":1773},{\"from\":52,\"to\":100006,\"weight\":-1.5501782864512093,\"enabled\":true,\"innovation\":2388},{\"from\":74,\"to\":100001,\"weight\":1.292819361814355,\"enabled\":true,\"innovation\":2389},{\"from\":2,\"to\":100001,\"weight\":-0.2596172481987864,\"enabled\":false,\"innovation\":2390},{\"from\":36,\"to\":100006,\"weight\":1.8487053887462253,\"enabled\":true,\"innovation\":2587},{\"from\":36,\"to\":100005,\"weight\":-1.2306905901049499,\"enabled\":true,\"innovation\":2588},{\"from\":174,\"to\":100001,\"weight\":-1.000013427622239,\"enabled\":true,\"innovation\":4096},{\"from\":64,\"to\":100004,\"weight\":0.7332303058402463,\"enabled\":true,\"innovation\":4097}],\"fitness\":302,\"mutationRates\":{\"connections\":0.21434374999999994,\"link\":2.3327015599941667,\"node\":0.4286874999999998,\"enable\":0.21052631578947356,\"disable\":0.4665403119988334,\"step\":0.10526315789473678},\"maxNeuron\":210},{\"genes\":[{\"from\":54,\"to\":100001,\"weight\":-0.6997019439991818,\"enabled\":true,\"innovation\":129},{\"from\":53,\"to\":100004,\"weight\":1.8758611994066907,\"enabled\":true,\"innovation\":130},{\"from\":72,\"to\":100001,\"weight\":-1.0026509932986394,\"enabled\":false,\"innovation\":277},{\"from\":193,\"to\":100002,\"weight\":0.049945016980229004,\"enabled\":false,\"innovation\":278},{\"from\":72,\"to\":202,\"weight\":0.9457796636229572,\"enabled\":true,\"innovation\":279},{\"from\":202,\"to\":100001,\"weight\":1.0251340750244362,\"enabled\":true,\"innovation\":280},{\"from\":86,\"to\":100002,\"weight\":1.7597447265130315,\"enabled\":true,\"innovation\":281},{\"from\":156,\"to\":100004,\"weight\":-1.2195171036438879,\"enabled\":true,\"innovation\":282},{\"from\":193,\"to\":203,\"weight\":1.0089171996015147,\"enabled\":true,\"innovation\":283},{\"from\":203,\"to\":100002,\"weight\":1,\"enabled\":false,\"innovation\":284},{\"from\":133,\"to\":100001,\"weight\":-1.8947697213735957,\"enabled\":true,\"innovation\":298},{\"from\":165,\"to\":100001,\"weight\":-1.3026563419722665,\"enabled\":true,\"innovation\":299},{\"from\":203,\"to\":204,\"weight\":1.0878307815773332,\"enabled\":true,\"innovation\":300},{\"from\":204,\"to\":100002,\"weight\":0.9960333025752637,\"enabled\":true,\"innovation\":301},{\"from\":1,\"to\":100005,\"weight\":1.976586923834125,\"enabled\":true,\"innovation\":1538},{\"from\":88,\"to\":100000,\"weight\":0.34035629597415795,\"enabled\":true,\"innovation\":1539},{\"from\":24,\"to\":100000,\"weight\":0.3088286128771136,\"enabled\":true,\"innovation\":1769},{\"from\":50,\"to\":100002,\"weight\":-0.3122514732708348,\"enabled\":false,\"innovation\":1770},{\"from\":96,\"to\":100006,\"weight\":-1.7141282399420197,\"enabled\":true,\"innovation\":1771},{\"from\":1,\"to\":210,\"weight\":1,\"enabled\":true,\"innovation\":1772},{\"from\":210,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":1773},{\"from\":52,\"to\":100006,\"weight\":-1.5501782864512093,\"enabled\":true,\"innovation\":2388},{\"from\":74,\"to\":100001,\"weight\":1.292819361814355,\"enabled\":true,\"innovation\":2389},{\"from\":2,\"to\":100001,\"weight\":-0.2596172481987864,\"enabled\":false,\"innovation\":2390},{\"from\":36,\"to\":100006,\"weight\":1.8487053887462253,\"enabled\":true,\"innovation\":2587},{\"from\":36,\"to\":100005,\"weight\":-1.2306905901049499,\"enabled\":true,\"innovation\":2588},{\"from\":174,\"to\":100001,\"weight\":-1.000013427622239,\"enabled\":true,\"innovation\":4096},{\"from\":64,\"to\":100004,\"weight\":0.7332303058402463,\"enabled\":true,\"innovation\":4097},{\"from\":158,\"to\":100000,\"weight\":1.6017317915078566,\"enabled\":true,\"innovation\":4098},{\"from\":178,\"to\":100001,\"weight\":-1.3515330076551173,\"enabled\":true,\"innovation\":4099}],\"fitness\":302,\"mutationRates\":{\"connections\":0.22562499999999994,\"link\":2.216066481994458,\"node\":0.45124999999999976,\"enable\":0.22160664819944584,\"disable\":0.4432132963988917,\"step\":0.09999999999999994},\"maxNeuron\":211},{\"genes\":[{\"from\":166,\"to\":100004,\"weight\":0.9560534419204741,\"enabled\":false,\"innovation\":125},{\"from\":105,\"to\":100003,\"weight\":-1.9871241456761601,\"enabled\":true,\"innovation\":126},{\"from\":166,\"to\":201,\"weight\":0.9738478116313477,\"enabled\":true,\"innovation\":127},{\"from\":201,\"to\":100004,\"weight\":1.0154330776996385,\"enabled\":true,\"innovation\":128},{\"from\":163,\"to\":100005,\"weight\":1.1496355539672205,\"enabled\":true,\"innovation\":724},{\"from\":132,\"to\":100006,\"weight\":-0.10026163449723949,\"enabled\":true,\"innovation\":725},{\"from\":105,\"to\":201,\"weight\":0.7726249432420165,\"enabled\":true,\"innovation\":726},{\"from\":201,\"to\":100003,\"weight\":0.9902075516850745,\"enabled\":false,\"innovation\":727},{\"from\":33,\"to\":100004,\"weight\":1.228652879096305,\"enabled\":true,\"innovation\":1746},{\"from\":191,\"to\":100006,\"weight\":0.8223445578839638,\"enabled\":true,\"innovation\":1747},{\"from\":13,\"to\":100004,\"weight\":-0.026326191136520016,\"enabled\":true,\"innovation\":1988},{\"from\":77,\"to\":100004,\"weight\":-1.8967243284321613,\"enabled\":true,\"innovation\":1989},{\"from\":201,\"to\":208,\"weight\":1,\"enabled\":true,\"innovation\":1990},{\"from\":208,\"to\":100003,\"weight\":1,\"enabled\":true,\"innovation\":1991}],\"fitness\":100,\"mutationRates\":{\"connections\":0.22562499999999996,\"link\":2.216066481994459,\"node\":0.45125,\"enable\":0.22160664819944592,\"disable\":0.3999999999999999,\"step\":0.09999999999999998},\"maxNeuron\":208},{\"genes\":[{\"from\":54,\"to\":100001,\"weight\":-0.7508556586317283,\"enabled\":true,\"innovation\":129},{\"from\":53,\"to\":100004,\"weight\":1.7687304084957762,\"enabled\":true,\"innovation\":130},{\"from\":72,\"to\":100001,\"weight\":-0.95570567443435,\"enabled\":false,\"innovation\":277},{\"from\":193,\"to\":100002,\"weight\":0.10990162974457406,\"enabled\":false,\"innovation\":278},{\"from\":72,\"to\":202,\"weight\":1.0482402655788736,\"enabled\":true,\"innovation\":279},{\"from\":202,\"to\":100001,\"weight\":1.1054114135753663,\"enabled\":true,\"innovation\":280},{\"from\":86,\"to\":100002,\"weight\":1.8259624150304261,\"enabled\":true,\"innovation\":281},{\"from\":156,\"to\":100004,\"weight\":-1.2277910641493783,\"enabled\":false,\"innovation\":282},{\"from\":193,\"to\":203,\"weight\":1.0414099404454005,\"enabled\":false,\"innovation\":283},{\"from\":203,\"to\":100002,\"weight\":0.7172386130749557,\"enabled\":false,\"innovation\":284},{\"from\":133,\"to\":100001,\"weight\":-1.9485181188881313,\"enabled\":true,\"innovation\":298},{\"from\":165,\"to\":100001,\"weight\":-0.3455207555557749,\"enabled\":true,\"innovation\":299},{\"from\":203,\"to\":204,\"weight\":1.0024043888009528,\"enabled\":true,\"innovation\":300},{\"from\":204,\"to\":100002,\"weight\":0.9528010811158109,\"enabled\":true,\"innovation\":301},{\"from\":1,\"to\":100005,\"weight\":2.0353900130769165,\"enabled\":true,\"innovation\":1538},{\"from\":88,\"to\":100000,\"weight\":0.3514321313790048,\"enabled\":false,\"innovation\":1539},{\"from\":69,\"to\":100001,\"weight\":-0.7252134378822843,\"enabled\":true,\"innovation\":2199},{\"from\":100003,\"to\":100005,\"weight\":1.5147980341008385,\"enabled\":true,\"innovation\":2200},{\"from\":193,\"to\":205,\"weight\":1.0931056846437985,\"enabled\":true,\"innovation\":2201},{\"from\":205,\"to\":203,\"weight\":1.1014121600650735,\"enabled\":true,\"innovation\":2202},{\"from\":11,\"to\":100003,\"weight\":-1.4228761930296656,\"enabled\":true,\"innovation\":2207},{\"from\":5,\"to\":100002,\"weight\":0.4311188499902334,\"enabled\":true,\"innovation\":2208},{\"from\":117,\"to\":100006,\"weight\":-0.14618393275797636,\"enabled\":true,\"innovation\":2379},{\"from\":45,\"to\":100006,\"weight\":0.6323182350448642,\"enabled\":true,\"innovation\":2380}],\"fitness\":100,\"mutationRates\":{\"connections\":0.2770083102493074,\"link\":2.216066481994458,\"node\":0.4999999999999997,\"enable\":0.22160664819944587,\"disable\":0.3999999999999998,\"step\":0.09999999999999995},\"maxNeuron\":208},{\"genes\":[{\"from\":54,\"to\":100001,\"weight\":-0.6997019439991818,\"enabled\":true,\"innovation\":129},{\"from\":53,\"to\":100004,\"weight\":1.8864405081147766,\"enabled\":true,\"innovation\":130},{\"from\":72,\"to\":100001,\"weight\":-0.9480566577321854,\"enabled\":false,\"innovation\":277},{\"from\":193,\"to\":100002,\"weight\":0.08348647116441163,\"enabled\":false,\"innovation\":278},{\"from\":72,\"to\":202,\"weight\":0.9457796636229572,\"enabled\":true,\"innovation\":279},{\"from\":202,\"to\":100001,\"weight\":1.1230612815086314,\"enabled\":true,\"innovation\":280},{\"from\":86,\"to\":100002,\"weight\":1.7597447265130315,\"enabled\":true,\"innovation\":281},{\"from\":156,\"to\":100004,\"weight\":-1.22401705788112,\"enabled\":false,\"innovation\":282},{\"from\":193,\"to\":203,\"weight\":1.0089171996015147,\"enabled\":true,\"innovation\":283},{\"from\":203,\"to\":100002,\"weight\":1.0577411270158088,\"enabled\":false,\"innovation\":284},{\"from\":133,\"to\":100001,\"weight\":-1.9759883536073513,\"enabled\":true,\"innovation\":298},{\"from\":165,\"to\":100001,\"weight\":-1.3026563419722665,\"enabled\":true,\"innovation\":299},{\"from\":203,\"to\":204,\"weight\":1.0878307815773332,\"enabled\":true,\"innovation\":300},{\"from\":204,\"to\":100002,\"weight\":0.9960333025752637,\"enabled\":true,\"innovation\":301},{\"from\":93,\"to\":100002,\"weight\":0.034300955964657986,\"enabled\":true,\"innovation\":324},{\"from\":100004,\"to\":100005,\"weight\":-0.40088484336884156,\"enabled\":true,\"innovation\":325},{\"from\":189,\"to\":100001,\"weight\":0.3640796172402432,\"enabled\":true,\"innovation\":485},{\"from\":99,\"to\":100004,\"weight\":0.7297890134350373,\"enabled\":true,\"innovation\":486},{\"from\":156,\"to\":205,\"weight\":1,\"enabled\":false,\"innovation\":487},{\"from\":205,\"to\":100004,\"weight\":1,\"enabled\":true,\"innovation\":488}],\"fitness\":100,\"mutationRates\":{\"connections\":0.22562499999999996,\"link\":2.2160664819944587,\"node\":0.5540166204986147,\"enable\":0.2216066481994459,\"disable\":0.4432132963988918,\"step\":0.09024999999999997},\"maxNeuron\":200},{\"genes\":[{\"from\":166,\"to\":100004,\"weight\":0.8717280015625863,\"enabled\":false,\"innovation\":125},{\"from\":105,\"to\":100003,\"weight\":-1.8415083770586511,\"enabled\":false,\"innovation\":126},{\"from\":166,\"to\":201,\"weight\":1.0725411776220515,\"enabled\":true,\"innovation\":127},{\"from\":201,\"to\":100004,\"weight\":1.079467809664185,\"enabled\":true,\"innovation\":128},{\"from\":163,\"to\":100005,\"weight\":0.04886198179973174,\"enabled\":true,\"innovation\":724},{\"from\":132,\"to\":100006,\"weight\":-0.03880356668240824,\"enabled\":true,\"innovation\":725},{\"from\":105,\"to\":201,\"weight\":1.565610565797896,\"enabled\":true,\"innovation\":726},{\"from\":201,\"to\":100003,\"weight\":1.0322778370764407,\"enabled\":false,\"innovation\":727},{\"from\":164,\"to\":100004,\"weight\":1.7007770032423002,\"enabled\":false,\"innovation\":1124},{\"from\":17,\"to\":100004,\"weight\":0.3076708820643922,\"enabled\":true,\"innovation\":1125},{\"from\":201,\"to\":203,\"weight\":0.9941422743107426,\"enabled\":false,\"innovation\":1126},{\"from\":203,\"to\":100003,\"weight\":1.0139141933133173,\"enabled\":true,\"innovation\":1127},{\"from\":108,\"to\":100002,\"weight\":0.8908385335587736,\"enabled\":true,\"innovation\":1984},{\"from\":111,\"to\":100002,\"weight\":-0.05177611741371228,\"enabled\":true,\"innovation\":1985},{\"from\":201,\"to\":208,\"weight\":0.9441037239923111,\"enabled\":true,\"innovation\":1986},{\"from\":208,\"to\":203,\"weight\":0.9323631547118634,\"enabled\":true,\"innovation\":1987},{\"from\":27,\"to\":100000,\"weight\":-0.8941753028934931,\"enabled\":false,\"innovation\":2628},{\"from\":62,\"to\":100005,\"weight\":1.4375268775527124,\"enabled\":true,\"innovation\":2629},{\"from\":27,\"to\":211,\"weight\":1,\"enabled\":true,\"innovation\":2630},{\"from\":211,\"to\":100000,\"weight\":1,\"enabled\":true,\"innovation\":2631}],\"fitness\":100,\"mutationRates\":{\"connections\":0.19344523437499997,\"link\":2.105263157894736,\"node\":0.4749999999999999,\"enable\":0.18999999999999995,\"disable\":0.42105263157894723,\"step\":0.08573749999999998},\"maxNeuron\":211},{\"genes\":[{\"from\":166,\"to\":100004,\"weight\":0.8630208732141286,\"enabled\":false,\"innovation\":125},{\"from\":105,\"to\":100003,\"weight\":-1.93413143264288,\"enabled\":false,\"innovation\":126},{\"from\":166,\"to\":201,\"weight\":0.9718099590665216,\"enabled\":true,\"innovation\":127},{\"from\":201,\"to\":100004,\"weight\":1.079467809664185,\"enabled\":true,\"innovation\":128},{\"from\":163,\"to\":100005,\"weight\":0.04886198179973174,\"enabled\":true,\"innovation\":724},{\"from\":132,\"to\":100006,\"weight\":-0.13194646261404053,\"enabled\":true,\"innovation\":725},{\"from\":105,\"to\":201,\"weight\":1.565610565797896,\"enabled\":true,\"innovation\":726},{\"from\":201,\"to\":100003,\"weight\":1,\"enabled\":true,\"innovation\":727},{\"from\":69,\"to\":100003,\"weight\":-1.7473725166651013,\"enabled\":true,\"innovation\":2213},{\"from\":63,\"to\":100006,\"weight\":0.18842228822408202,\"enabled\":true,\"innovation\":2214},{\"from\":82,\"to\":100003,\"weight\":-1.3849514725193455,\"enabled\":true,\"innovation\":4092},{\"from\":147,\"to\":100001,\"weight\":-0.5581937564486523,\"enabled\":true,\"innovation\":4093}],\"fitness\":97,\"mutationRates\":{\"connections\":0.24999999999999997,\"link\":2.216066481994459,\"node\":0.40725312499999994,\"enable\":0.19999999999999996,\"disable\":0.3999999999999999,\"step\":0.09999999999999998},\"maxNeuron\":211},{\"genes\":[{\"from\":54,\"to\":100001,\"weight\":-0.7406974245505166,\"enabled\":true,\"innovation\":129},{\"from\":53,\"to\":100004,\"weight\":1.8758611994066907,\"enabled\":true,\"innovation\":130},{\"from\":72,\"to\":100001,\"weight\":-1.0026509932986394,\"enabled\":false,\"innovation\":277},{\"from\":193,\"to\":100002,\"weight\":0.049945016980229004,\"enabled\":false,\"innovation\":278},{\"from\":72,\"to\":202,\"weight\":1.0271846280433425,\"enabled\":true,\"innovation\":279},{\"from\":202,\"to\":100001,\"weight\":1.0251340750244362,\"enabled\":true,\"innovation\":280},{\"from\":86,\"to\":100002,\"weight\":1.6761510589339117,\"enabled\":true,\"innovation\":281},{\"from\":156,\"to\":100004,\"weight\":-1.2195171036438879,\"enabled\":true,\"innovation\":282},{\"from\":193,\"to\":203,\"weight\":0.9777543195558692,\"enabled\":true,\"innovation\":283},{\"from\":203,\"to\":100002,\"weight\":1,\"enabled\":false,\"innovation\":284},{\"from\":133,\"to\":100001,\"weight\":-1.8947697213735957,\"enabled\":true,\"innovation\":298},{\"from\":165,\"to\":100001,\"weight\":-1.3764243881557388,\"enabled\":true,\"innovation\":299},{\"from\":203,\"to\":204,\"weight\":1,\"enabled\":true,\"innovation\":300},{\"from\":204,\"to\":100002,\"weight\":1,\"enabled\":true,\"innovation\":301},{\"from\":1,\"to\":100005,\"weight\":1.976586923834125,\"enabled\":true,\"innovation\":1538},{\"from\":88,\"to\":100000,\"weight\":0.34035629597415795,\"enabled\":true,\"innovation\":1539},{\"from\":24,\"to\":100000,\"weight\":0.3088286128771136,\"enabled\":true,\"innovation\":1769},{\"from\":50,\"to\":100002,\"weight\":-0.3122514732708348,\"enabled\":false,\"innovation\":1770},{\"from\":96,\"to\":100006,\"weight\":-1.7141282399420197,\"enabled\":true,\"innovation\":1771},{\"from\":1,\"to\":210,\"weight\":1,\"enabled\":true,\"innovation\":1772},{\"from\":210,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":1773},{\"from\":52,\"to\":100006,\"weight\":-1.5501782864512093,\"enabled\":true,\"innovation\":2388},{\"from\":74,\"to\":100001,\"weight\":1.292819361814355,\"enabled\":true,\"innovation\":2389},{\"from\":2,\"to\":100001,\"weight\":-0.2596172481987864,\"enabled\":false,\"innovation\":2390},{\"from\":36,\"to\":100006,\"weight\":1.8487053887462253,\"enabled\":true,\"innovation\":2587},{\"from\":36,\"to\":100005,\"weight\":-1.2306905901049499,\"enabled\":true,\"innovation\":2588}],\"fitness\":93,\"mutationRates\":{\"connections\":0.22562499999999996,\"link\":2.4554753263096494,\"node\":0.4072531249999998,\"enable\":0.1999999999999999,\"disable\":0.4910950652619299,\"step\":0.09999999999999995},\"maxNeuron\":210}];\n\n//# sourceURL=webpack:///./species-2.json?");

/***/ }),

/***/ "./species-3.json":
/*!************************!*\
  !*** ./species-3.json ***!
  \************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, default */
/***/ (function(module) {

eval("module.exports = [{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9991009404559463,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.781371198038646,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":1,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.2704588944345332,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.118511122757492,\"enabled\":true,\"innovation\":413},{\"from\":183,\"to\":100002,\"weight\":-0.8791122835290714,\"enabled\":false,\"innovation\":617},{\"from\":60,\"to\":100005,\"weight\":-1.5510461055344207,\"enabled\":true,\"innovation\":618},{\"from\":20,\"to\":100003,\"weight\":1.6688244330113022,\"enabled\":true,\"innovation\":1246},{\"from\":140,\"to\":100000,\"weight\":-1.539298225468972,\"enabled\":true,\"innovation\":1247},{\"from\":47,\"to\":100004,\"weight\":0.5225024254717408,\"enabled\":true,\"innovation\":1867},{\"from\":102,\"to\":100000,\"weight\":-1.77515154642908,\"enabled\":true,\"innovation\":1868}],\"fitness\":308,\"mutationRates\":{\"connections\":0.21434374999999994,\"link\":2.332701559994167,\"node\":0.4286874999999999,\"enable\":0.18999999999999995,\"disable\":0.4665403119988335,\"step\":0.11663507799970838},\"maxNeuron\":200},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9904245651205785,\"enabled\":false,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8357849687057155,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.503299985092017,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":0.9290004187777879,\"enabled\":true,\"innovation\":86},{\"from\":52,\"to\":100006,\"weight\":-1.8195721215341525,\"enabled\":true,\"innovation\":1457},{\"from\":154,\"to\":100005,\"weight\":-0.31873920646684173,\"enabled\":false,\"innovation\":1458},{\"from\":154,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":1459},{\"from\":202,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":1460},{\"from\":99,\"to\":100006,\"weight\":0.7240282126205839,\"enabled\":true,\"innovation\":1861},{\"from\":142,\"to\":100000,\"weight\":-0.32816940607629963,\"enabled\":true,\"innovation\":1862},{\"from\":40,\"to\":100002,\"weight\":0.79567137528782,\"enabled\":true,\"innovation\":2717},{\"from\":19,\"to\":100004,\"weight\":1.091646883450065,\"enabled\":false,\"innovation\":2718},{\"from\":99,\"to\":203,\"weight\":1,\"enabled\":true,\"innovation\":2719},{\"from\":203,\"to\":100002,\"weight\":1,\"enabled\":true,\"innovation\":2720}],\"fitness\":307,\"mutationRates\":{\"connections\":0.24999999999999997,\"link\":1.805,\"node\":0.45125,\"enable\":0.18049999999999997,\"disable\":0.44321329639889184,\"step\":0.11080332409972296},\"maxNeuron\":203},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9904245651205785,\"enabled\":false,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8357849687057155,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.503299985092017,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":0.9290004187777879,\"enabled\":true,\"innovation\":86},{\"from\":52,\"to\":100006,\"weight\":-1.8195721215341525,\"enabled\":true,\"innovation\":1457},{\"from\":154,\"to\":100005,\"weight\":-0.31873920646684173,\"enabled\":false,\"innovation\":1458},{\"from\":154,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":1459},{\"from\":202,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":1460},{\"from\":99,\"to\":100006,\"weight\":0.7240282126205839,\"enabled\":true,\"innovation\":1861},{\"from\":142,\"to\":100000,\"weight\":-0.32816940607629963,\"enabled\":true,\"innovation\":1862},{\"from\":40,\"to\":100002,\"weight\":0.79567137528782,\"enabled\":true,\"innovation\":2717},{\"from\":19,\"to\":100004,\"weight\":1.091646883450065,\"enabled\":false,\"innovation\":2718},{\"from\":99,\"to\":203,\"weight\":1,\"enabled\":true,\"innovation\":2719},{\"from\":203,\"to\":100002,\"weight\":1,\"enabled\":true,\"innovation\":2720}],\"fitness\":307,\"mutationRates\":{\"connections\":0.24999999999999997,\"link\":1.805,\"node\":0.45125,\"enable\":0.18049999999999997,\"disable\":0.44321329639889184,\"step\":0.11080332409972296},\"maxNeuron\":200},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9889168218915357,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8779043658339987,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.5814253759413344,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":1,\"enabled\":true,\"innovation\":86},{\"from\":52,\"to\":100006,\"weight\":-1.8805972996776479,\"enabled\":true,\"innovation\":1457},{\"from\":154,\"to\":100005,\"weight\":-0.22055126533064803,\"enabled\":false,\"innovation\":1458},{\"from\":154,\"to\":202,\"weight\":0.9009655035735092,\"enabled\":true,\"innovation\":1459},{\"from\":202,\"to\":100005,\"weight\":-1.1846223717699678,\"enabled\":true,\"innovation\":1460},{\"from\":77,\"to\":100001,\"weight\":1.1191742337248214,\"enabled\":true,\"innovation\":2726},{\"from\":6,\"to\":100003,\"weight\":-0.8704304217283679,\"enabled\":true,\"innovation\":2727},{\"from\":25,\"to\":100002,\"weight\":-1.5000752023119253,\"enabled\":true,\"innovation\":3970},{\"from\":19,\"to\":100004,\"weight\":1.0458333010012026,\"enabled\":true,\"innovation\":3971},{\"from\":73,\"to\":100000,\"weight\":0.49514091434934393,\"enabled\":true,\"innovation\":3981},{\"from\":33,\"to\":100006,\"weight\":-1.7031141419296247,\"enabled\":true,\"innovation\":3982}],\"fitness\":307,\"mutationRates\":{\"connections\":0.23749999999999996,\"link\":1.7147499999999996,\"node\":0.4286874999999999,\"enable\":0.21052631578947362,\"disable\":0.4665403119988335,\"step\":0.10526315789473681},\"maxNeuron\":202},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9991009404559463,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.781371198038646,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":1,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.2704588944345332,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.118511122757492,\"enabled\":true,\"innovation\":413}],\"fitness\":306,\"mutationRates\":{\"connections\":0.225625,\"link\":1.9999999999999998,\"node\":0.45125,\"enable\":0.1805,\"disable\":0.4432132963988919,\"step\":0.09999999999999999},\"maxNeuron\":201},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":0.4998795462966932,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8357849687057155,\"enabled\":true,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.503299985092017,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":0.9290004187777879,\"enabled\":true,\"innovation\":86},{\"from\":52,\"to\":100006,\"weight\":-1.8195721215341525,\"enabled\":true,\"innovation\":1457},{\"from\":154,\"to\":100005,\"weight\":-0.31873920646684173,\"enabled\":false,\"innovation\":1458},{\"from\":154,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":1459},{\"from\":202,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":1460},{\"from\":99,\"to\":100006,\"weight\":0.7240282126205839,\"enabled\":true,\"innovation\":1861},{\"from\":142,\"to\":100000,\"weight\":-0.24712155919121498,\"enabled\":true,\"innovation\":1862},{\"from\":40,\"to\":100002,\"weight\":0.79567137528782,\"enabled\":true,\"innovation\":2717},{\"from\":19,\"to\":100004,\"weight\":1.091646883450065,\"enabled\":false,\"innovation\":2718},{\"from\":99,\"to\":203,\"weight\":1,\"enabled\":true,\"innovation\":2719},{\"from\":203,\"to\":100002,\"weight\":1,\"enabled\":true,\"innovation\":2720},{\"from\":166,\"to\":100002,\"weight\":-0.47762069388566974,\"enabled\":false,\"innovation\":3741},{\"from\":51,\"to\":100002,\"weight\":1.893462963160407,\"enabled\":true,\"innovation\":3742},{\"from\":166,\"to\":204,\"weight\":1,\"enabled\":true,\"innovation\":3743},{\"from\":204,\"to\":100002,\"weight\":1,\"enabled\":true,\"innovation\":3744},{\"from\":161,\"to\":100003,\"weight\":0.5962352324779179,\"enabled\":true,\"innovation\":3749},{\"from\":8,\"to\":100001,\"weight\":-0.3763688717499427,\"enabled\":true,\"innovation\":3750},{\"from\":158,\"to\":100002,\"weight\":-1.6648795489465593,\"enabled\":true,\"innovation\":3784},{\"from\":148,\"to\":100001,\"weight\":0.12762689622071388,\"enabled\":true,\"innovation\":3785}],\"fitness\":306,\"mutationRates\":{\"connections\":0.23749999999999993,\"link\":1.8999999999999997,\"node\":0.38689046874999994,\"enable\":0.17147499999999993,\"disable\":0.46654031199883345,\"step\":0.12923554348998156},\"maxNeuron\":204},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9904245651205785,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8357849687057155,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.503299985092017,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":0.9290004187777879,\"enabled\":true,\"innovation\":86},{\"from\":52,\"to\":100006,\"weight\":-1.8195721215341525,\"enabled\":true,\"innovation\":1457},{\"from\":154,\"to\":100005,\"weight\":-0.31873920646684173,\"enabled\":false,\"innovation\":1458},{\"from\":154,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":1459},{\"from\":202,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":1460},{\"from\":99,\"to\":100006,\"weight\":0.7240282126205839,\"enabled\":true,\"innovation\":1861},{\"from\":142,\"to\":100000,\"weight\":-0.32816940607629963,\"enabled\":true,\"innovation\":1862},{\"from\":71,\"to\":100004,\"weight\":0.034933320674690016,\"enabled\":true,\"innovation\":2288},{\"from\":10,\"to\":100005,\"weight\":1.661656973959234,\"enabled\":false,\"innovation\":2289},{\"from\":10,\"to\":203,\"weight\":1,\"enabled\":true,\"innovation\":2290},{\"from\":203,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":2291}],\"fitness\":304,\"mutationRates\":{\"connections\":0.24999999999999997,\"link\":1.9999999999999998,\"node\":0.45125,\"enable\":0.18049999999999997,\"disable\":0.3999999999999999,\"step\":0.09999999999999998},\"maxNeuron\":200},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9991009404559463,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.781371198038646,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":1,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.2704588944345332,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.118511122757492,\"enabled\":true,\"innovation\":413},{\"from\":183,\"to\":100002,\"weight\":-0.8791122835290714,\"enabled\":false,\"innovation\":617},{\"from\":60,\"to\":100005,\"weight\":-1.5510461055344207,\"enabled\":true,\"innovation\":618}],\"fitness\":303,\"mutationRates\":{\"connections\":0.21434374999999997,\"link\":2.1052631578947363,\"node\":0.42868749999999994,\"enable\":0.18999999999999997,\"disable\":0.46654031199883356,\"step\":0.10526315789473682},\"maxNeuron\":201},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9991009404559463,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.781371198038646,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":1,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.2704588944345332,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.118511122757492,\"enabled\":true,\"innovation\":413},{\"from\":183,\"to\":100002,\"weight\":-0.8791122835290714,\"enabled\":false,\"innovation\":617},{\"from\":60,\"to\":100005,\"weight\":-1.5510461055344207,\"enabled\":true,\"innovation\":618},{\"from\":20,\"to\":100003,\"weight\":1.6688244330113022,\"enabled\":true,\"innovation\":1246},{\"from\":140,\"to\":100000,\"weight\":-1.539298225468972,\"enabled\":true,\"innovation\":1247}],\"fitness\":303,\"mutationRates\":{\"connections\":0.22562499999999996,\"link\":2.216066481994459,\"node\":0.45124999999999993,\"enable\":0.18049999999999997,\"disable\":0.44321329639889184,\"step\":0.11080332409972296},\"maxNeuron\":201},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.949209189120867,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8000030193914174,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.0182813776770747,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":-1.5636003516194537,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.212172912518438,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.2088901004206125,\"enabled\":true,\"innovation\":413},{\"from\":183,\"to\":100002,\"weight\":-0.8586263601033376,\"enabled\":false,\"innovation\":617},{\"from\":60,\"to\":100005,\"weight\":-1.4527991305507524,\"enabled\":true,\"innovation\":618},{\"from\":20,\"to\":100003,\"weight\":1.574491078023397,\"enabled\":true,\"innovation\":1246},{\"from\":140,\"to\":100000,\"weight\":-1.5231517077391028,\"enabled\":true,\"innovation\":1247},{\"from\":57,\"to\":100000,\"weight\":-0.5192704187417645,\"enabled\":true,\"innovation\":1869},{\"from\":64,\"to\":100006,\"weight\":0.7343406885496977,\"enabled\":true,\"innovation\":1870},{\"from\":155,\"to\":100004,\"weight\":1.2307300031627442,\"enabled\":true,\"innovation\":1871}],\"fitness\":303,\"mutationRates\":{\"connections\":0.23749999999999996,\"link\":2.332701559994167,\"node\":0.4286874999999999,\"enable\":0.18999999999999995,\"disable\":0.4665403119988335,\"step\":0.10526315789473681},\"maxNeuron\":201},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9991009404559463,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.781371198038646,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":1,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.2704588944345332,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.118511122757492,\"enabled\":true,\"innovation\":413},{\"from\":183,\"to\":100002,\"weight\":-0.8791122835290714,\"enabled\":false,\"innovation\":617},{\"from\":60,\"to\":100005,\"weight\":-1.5510461055344207,\"enabled\":true,\"innovation\":618},{\"from\":20,\"to\":100003,\"weight\":1.6688244330113022,\"enabled\":true,\"innovation\":1246},{\"from\":140,\"to\":100000,\"weight\":-1.539298225468972,\"enabled\":true,\"innovation\":1247},{\"from\":47,\"to\":100004,\"weight\":0.5225024254717408,\"enabled\":true,\"innovation\":1867},{\"from\":102,\"to\":100000,\"weight\":-1.77515154642908,\"enabled\":true,\"innovation\":1868}],\"fitness\":303,\"mutationRates\":{\"connections\":0.21434374999999994,\"link\":2.332701559994167,\"node\":0.4286874999999999,\"enable\":0.18999999999999995,\"disable\":0.4665403119988335,\"step\":0.11663507799970838},\"maxNeuron\":200},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9991009404559463,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.781371198038646,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":1,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.2704588944345332,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.118511122757492,\"enabled\":true,\"innovation\":413},{\"from\":183,\"to\":100002,\"weight\":-0.8791122835290714,\"enabled\":false,\"innovation\":617},{\"from\":60,\"to\":100005,\"weight\":-1.5510461055344207,\"enabled\":true,\"innovation\":618},{\"from\":20,\"to\":100003,\"weight\":1.6688244330113022,\"enabled\":true,\"innovation\":1246},{\"from\":140,\"to\":100000,\"weight\":-1.539298225468972,\"enabled\":true,\"innovation\":1247},{\"from\":123,\"to\":100003,\"weight\":-0.8058086849351085,\"enabled\":true,\"innovation\":2088},{\"from\":86,\"to\":100005,\"weight\":0.040891754077351905,\"enabled\":false,\"innovation\":2089},{\"from\":86,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":2090},{\"from\":202,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":2091}],\"fitness\":303,\"mutationRates\":{\"connections\":0.23749999999999996,\"link\":2.332701559994167,\"node\":0.4286874999999999,\"enable\":0.18999999999999995,\"disable\":0.4665403119988335,\"step\":0.10526315789473681},\"maxNeuron\":202},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9991009404559463,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.781371198038646,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":1,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.2704588944345332,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.118511122757492,\"enabled\":true,\"innovation\":413},{\"from\":183,\"to\":100002,\"weight\":-0.8791122835290714,\"enabled\":false,\"innovation\":617},{\"from\":60,\"to\":100005,\"weight\":-1.5510461055344207,\"enabled\":true,\"innovation\":618},{\"from\":20,\"to\":100003,\"weight\":1.6688244330113022,\"enabled\":true,\"innovation\":1246},{\"from\":140,\"to\":100000,\"weight\":-1.539298225468972,\"enabled\":true,\"innovation\":1247},{\"from\":47,\"to\":100004,\"weight\":0.5225024254717408,\"enabled\":true,\"innovation\":1867},{\"from\":102,\"to\":100000,\"weight\":-1.77515154642908,\"enabled\":true,\"innovation\":1868}],\"fitness\":303,\"mutationRates\":{\"connections\":0.21434374999999994,\"link\":2.332701559994167,\"node\":0.4286874999999999,\"enable\":0.18999999999999995,\"disable\":0.4665403119988335,\"step\":0.11663507799970838},\"maxNeuron\":200},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9904245651205785,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8357849687057155,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.503299985092017,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":0.9290004187777879,\"enabled\":true,\"innovation\":86},{\"from\":52,\"to\":100006,\"weight\":-1.8195721215341525,\"enabled\":true,\"innovation\":1457},{\"from\":154,\"to\":100005,\"weight\":-0.31873920646684173,\"enabled\":false,\"innovation\":1458},{\"from\":154,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":1459},{\"from\":202,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":1460},{\"from\":99,\"to\":100006,\"weight\":0.7240282126205839,\"enabled\":true,\"innovation\":1861},{\"from\":142,\"to\":100000,\"weight\":-0.32816940607629963,\"enabled\":true,\"innovation\":1862},{\"from\":71,\"to\":100004,\"weight\":0.034933320674690016,\"enabled\":true,\"innovation\":2288},{\"from\":10,\"to\":100005,\"weight\":1.661656973959234,\"enabled\":false,\"innovation\":2289},{\"from\":10,\"to\":203,\"weight\":1,\"enabled\":true,\"innovation\":2290},{\"from\":203,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":2291}],\"fitness\":303,\"mutationRates\":{\"connections\":0.24999999999999997,\"link\":1.9999999999999998,\"node\":0.45125,\"enable\":0.18049999999999997,\"disable\":0.3999999999999999,\"step\":0.09999999999999998},\"maxNeuron\":203},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9904245651205785,\"enabled\":false,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8357849687057155,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.503299985092017,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":0.9290004187777879,\"enabled\":true,\"innovation\":86},{\"from\":52,\"to\":100006,\"weight\":-1.8195721215341525,\"enabled\":true,\"innovation\":1457},{\"from\":154,\"to\":100005,\"weight\":-0.31873920646684173,\"enabled\":false,\"innovation\":1458},{\"from\":154,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":1459},{\"from\":202,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":1460},{\"from\":176,\"to\":100005,\"weight\":-0.6129392118401711,\"enabled\":true,\"innovation\":2292},{\"from\":85,\"to\":100006,\"weight\":1.7443143821609155,\"enabled\":true,\"innovation\":2293},{\"from\":99,\"to\":203,\"weight\":1,\"enabled\":true,\"innovation\":2294},{\"from\":203,\"to\":100002,\"weight\":1,\"enabled\":true,\"innovation\":2295}],\"fitness\":303,\"mutationRates\":{\"connections\":0.2375,\"link\":1.7147499999999998,\"node\":0.475,\"enable\":0.18999999999999997,\"disable\":0.46654031199883356,\"step\":0.09499999999999999},\"maxNeuron\":203},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":1.0264740757288529,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8309412897493306,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":0.974529218836479,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":1.0064701096922368,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.203967901567007,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.1009391646959679,\"enabled\":true,\"innovation\":413},{\"from\":183,\"to\":100002,\"weight\":-0.8206524745103647,\"enabled\":false,\"innovation\":617},{\"from\":60,\"to\":100005,\"weight\":-1.516382983645858,\"enabled\":true,\"innovation\":618},{\"from\":17,\"to\":100000,\"weight\":1.6433719630729335,\"enabled\":true,\"innovation\":2528},{\"from\":54,\"to\":100004,\"weight\":1.0174733008687165,\"enabled\":true,\"innovation\":2529}],\"fitness\":303,\"mutationRates\":{\"connections\":0.20362656249999997,\"link\":2.216066481994459,\"node\":0.40725312499999994,\"enable\":0.18049999999999997,\"disable\":0.44321329639889184,\"step\":0.11080332409972296},\"maxNeuron\":202},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9991009404559463,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8000030193914174,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.0182813776770747,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":-1.5636003516194537,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.2704588944345332,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.2088901004206125,\"enabled\":true,\"innovation\":413},{\"from\":183,\"to\":100002,\"weight\":-0.8586263601033376,\"enabled\":false,\"innovation\":617},{\"from\":60,\"to\":100005,\"weight\":-1.5510461055344207,\"enabled\":true,\"innovation\":618},{\"from\":20,\"to\":100003,\"weight\":1.574491078023397,\"enabled\":true,\"innovation\":1246},{\"from\":140,\"to\":100000,\"weight\":-1.539298225468972,\"enabled\":true,\"innovation\":1247},{\"from\":57,\"to\":100000,\"weight\":-0.5192704187417645,\"enabled\":true,\"innovation\":1869},{\"from\":64,\"to\":100006,\"weight\":0.7343406885496977,\"enabled\":true,\"innovation\":1870},{\"from\":155,\"to\":100004,\"weight\":1.2307300031627442,\"enabled\":true,\"innovation\":1871},{\"from\":9,\"to\":100003,\"weight\":0.6263260000673814,\"enabled\":true,\"innovation\":2713},{\"from\":100003,\"to\":100003,\"weight\":-0.830739563426186,\"enabled\":true,\"innovation\":2714}],\"fitness\":303,\"mutationRates\":{\"connections\":0.24999999999999994,\"link\":2.4554753263096494,\"node\":0.4512499999999999,\"enable\":0.18049999999999994,\"disable\":0.4432132963988918,\"step\":0.09999999999999996},\"maxNeuron\":201},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9991009404559463,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8357849687057155,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.503299985092017,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":1,\"enabled\":true,\"innovation\":86},{\"from\":52,\"to\":100006,\"weight\":-1.8195721215341525,\"enabled\":true,\"innovation\":1457},{\"from\":154,\"to\":100005,\"weight\":-0.31873920646684173,\"enabled\":false,\"innovation\":1458},{\"from\":154,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":1459},{\"from\":202,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":1460},{\"from\":77,\"to\":100001,\"weight\":1.1196225662858454,\"enabled\":true,\"innovation\":2726},{\"from\":6,\"to\":100003,\"weight\":-0.9385565715638711,\"enabled\":true,\"innovation\":2727}],\"fitness\":303,\"mutationRates\":{\"connections\":0.2375,\"link\":1.7147499999999998,\"node\":0.42868749999999994,\"enable\":0.18999999999999997,\"disable\":0.4210526315789473,\"step\":0.09499999999999999},\"maxNeuron\":202},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9933956232334844,\"enabled\":false,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8306319763741659,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.0320440407135023,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":0.6888822980002764,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.2220397910654166,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.1562976714679374,\"enabled\":true,\"innovation\":413},{\"from\":0,\"to\":100003,\"weight\":-1.8093636036355543,\"enabled\":true,\"innovation\":2732},{\"from\":197,\"to\":100006,\"weight\":-0.5624054319748071,\"enabled\":true,\"innovation\":2733},{\"from\":99,\"to\":203,\"weight\":1,\"enabled\":true,\"innovation\":2734},{\"from\":203,\"to\":100002,\"weight\":1,\"enabled\":true,\"innovation\":2735}],\"fitness\":303,\"mutationRates\":{\"connections\":0.2375,\"link\":1.8999999999999997,\"node\":0.475,\"enable\":0.18999999999999997,\"disable\":0.46654031199883356,\"step\":0.10526315789473682},\"maxNeuron\":203},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-1.017030926485279,\"enabled\":false,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8051582166779727,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.0518438792807978,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":-0.30884298485093264,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.3566280060490383,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.0804534547792484,\"enabled\":false,\"innovation\":413},{\"from\":11,\"to\":100005,\"weight\":1.645643324744455,\"enabled\":true,\"innovation\":2886},{\"from\":73,\"to\":100002,\"weight\":1.849991772792536,\"enabled\":true,\"innovation\":2887},{\"from\":99,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":2888},{\"from\":202,\"to\":100002,\"weight\":1,\"enabled\":true,\"innovation\":2889}],\"fitness\":303,\"mutationRates\":{\"connections\":0.2375,\"link\":2.1052631578947363,\"node\":0.42868749999999994,\"enable\":0.171475,\"disable\":0.4210526315789473,\"step\":0.09499999999999999},\"maxNeuron\":202},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9991009404559463,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8357849687057155,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.503299985092017,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":0.9290004187777879,\"enabled\":true,\"innovation\":86},{\"from\":52,\"to\":100006,\"weight\":-1.8195721215341525,\"enabled\":true,\"innovation\":1457},{\"from\":154,\"to\":100005,\"weight\":-0.31873920646684173,\"enabled\":false,\"innovation\":1458},{\"from\":154,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":1459},{\"from\":202,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":1460},{\"from\":135,\"to\":100002,\"weight\":0.48485678829652024,\"enabled\":true,\"innovation\":2902},{\"from\":87,\"to\":100001,\"weight\":-0.23523416954318854,\"enabled\":true,\"innovation\":2903}],\"fitness\":303,\"mutationRates\":{\"connections\":0.21434374999999997,\"link\":1.7147499999999998,\"node\":0.42868749999999994,\"enable\":0.171475,\"disable\":0.46654031199883356,\"step\":0.10526315789473682},\"maxNeuron\":202},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":0.4998795462966932,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.790598189458008,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.0840597321658867,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":0.8487307946766257,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.2530344368148083,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.0681723485224488,\"enabled\":true,\"innovation\":413},{\"from\":183,\"to\":100002,\"weight\":-0.8610476991737768,\"enabled\":false,\"innovation\":617},{\"from\":60,\"to\":100005,\"weight\":-1.5210151334798014,\"enabled\":true,\"innovation\":618},{\"from\":20,\"to\":100003,\"weight\":1.674416375293633,\"enabled\":true,\"innovation\":1246},{\"from\":140,\"to\":100000,\"weight\":-1.4514532545440313,\"enabled\":false,\"innovation\":1247},{\"from\":47,\"to\":100004,\"weight\":0.516846230092752,\"enabled\":true,\"innovation\":1867},{\"from\":102,\"to\":100000,\"weight\":-1.8033372270456343,\"enabled\":true,\"innovation\":1868},{\"from\":30,\"to\":100004,\"weight\":-1.6379287150408262,\"enabled\":true,\"innovation\":2904},{\"from\":96,\"to\":100004,\"weight\":1.4495674091822153,\"enabled\":true,\"innovation\":2905},{\"from\":132,\"to\":100004,\"weight\":-1.8568191286856255,\"enabled\":true,\"innovation\":2906},{\"from\":140,\"to\":201,\"weight\":1,\"enabled\":true,\"innovation\":2907},{\"from\":201,\"to\":100000,\"weight\":1,\"enabled\":true,\"innovation\":2908}],\"fitness\":303,\"mutationRates\":{\"connections\":0.20362656249999994,\"link\":2.4554753263096494,\"node\":0.4512499999999999,\"enable\":0.19999999999999993,\"disable\":0.4432132963988918,\"step\":0.11080332409972295},\"maxNeuron\":201},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9991009404559463,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.781371198038646,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":1,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.2530344368148083,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.0681723485224488,\"enabled\":true,\"innovation\":413},{\"from\":183,\"to\":100002,\"weight\":-0.8791122835290714,\"enabled\":false,\"innovation\":617},{\"from\":60,\"to\":100005,\"weight\":-1.5510461055344207,\"enabled\":true,\"innovation\":618},{\"from\":20,\"to\":100003,\"weight\":1.674416375293633,\"enabled\":true,\"innovation\":1246},{\"from\":140,\"to\":100000,\"weight\":-1.539298225468972,\"enabled\":true,\"innovation\":1247},{\"from\":47,\"to\":100004,\"weight\":0.516846230092752,\"enabled\":true,\"innovation\":1867},{\"from\":102,\"to\":100000,\"weight\":-1.8033372270456343,\"enabled\":true,\"innovation\":1868},{\"from\":170,\"to\":100004,\"weight\":1.547271063438437,\"enabled\":true,\"innovation\":2919},{\"from\":78,\"to\":100002,\"weight\":1.47380727135912,\"enabled\":true,\"innovation\":2920}],\"fitness\":303,\"mutationRates\":{\"connections\":0.22562499999999994,\"link\":2.2160664819944587,\"node\":0.4072531249999999,\"enable\":0.18049999999999994,\"disable\":0.4432132963988918,\"step\":0.1227737663154825},\"maxNeuron\":201},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-1.9514235113646095,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.7170184790241086,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.0017242678110931,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":0.8438833586791659,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.2740851406206781,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.152835520719226,\"enabled\":true,\"innovation\":413},{\"from\":183,\"to\":100002,\"weight\":-0.9134435259564241,\"enabled\":false,\"innovation\":617},{\"from\":60,\"to\":100005,\"weight\":-1.4707867849882312,\"enabled\":true,\"innovation\":618},{\"from\":79,\"to\":100000,\"weight\":-1.774746673794498,\"enabled\":true,\"innovation\":2921},{\"from\":126,\"to\":100003,\"weight\":1.0846737805861961,\"enabled\":true,\"innovation\":2922}],\"fitness\":303,\"mutationRates\":{\"connections\":0.22562499999999996,\"link\":1.9999999999999993,\"node\":0.45124999999999993,\"enable\":0.18049999999999997,\"disable\":0.49109506526193003,\"step\":0.09999999999999998},\"maxNeuron\":201},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-1.000407691579454,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8357849687057155,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.503299985092017,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":0.9629062238894602,\"enabled\":true,\"innovation\":86},{\"from\":52,\"to\":100006,\"weight\":-1.8195721215341525,\"enabled\":true,\"innovation\":1457},{\"from\":154,\"to\":100005,\"weight\":-0.31873920646684173,\"enabled\":false,\"innovation\":1458},{\"from\":154,\"to\":202,\"weight\":1.0849293463009095,\"enabled\":true,\"innovation\":1459},{\"from\":202,\"to\":100005,\"weight\":0.9783695137040106,\"enabled\":true,\"innovation\":1460},{\"from\":176,\"to\":100005,\"weight\":-0.6129392118401711,\"enabled\":false,\"innovation\":2292},{\"from\":85,\"to\":100006,\"weight\":1.7443143821609155,\"enabled\":true,\"innovation\":2293},{\"from\":99,\"to\":203,\"weight\":1,\"enabled\":true,\"innovation\":2294},{\"from\":203,\"to\":100002,\"weight\":1,\"enabled\":true,\"innovation\":2295},{\"from\":171,\"to\":100006,\"weight\":1.8029393410937216,\"enabled\":true,\"innovation\":3117}],\"fitness\":303,\"mutationRates\":{\"connections\":0.24999999999999997,\"link\":1.6290124999999998,\"node\":0.45125,\"enable\":0.19999999999999996,\"disable\":0.49109506526193003,\"step\":0.09999999999999998},\"maxNeuron\":203},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9991009404559463,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.781371198038646,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":1,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.2704588944345332,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.118511122757492,\"enabled\":true,\"innovation\":413},{\"from\":183,\"to\":100002,\"weight\":-0.8791122835290714,\"enabled\":false,\"innovation\":617},{\"from\":60,\"to\":100005,\"weight\":-1.5510461055344207,\"enabled\":true,\"innovation\":618},{\"from\":20,\"to\":100003,\"weight\":1.6688244330113022,\"enabled\":true,\"innovation\":1246},{\"from\":140,\"to\":100000,\"weight\":-1.539298225468972,\"enabled\":true,\"innovation\":1247},{\"from\":123,\"to\":100003,\"weight\":-0.8058086849351085,\"enabled\":true,\"innovation\":2088},{\"from\":86,\"to\":100005,\"weight\":0.040891754077351905,\"enabled\":false,\"innovation\":2089},{\"from\":86,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":2090},{\"from\":202,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":2091}],\"fitness\":303,\"mutationRates\":{\"connections\":0.23749999999999996,\"link\":2.332701559994167,\"node\":0.4286874999999999,\"enable\":0.18999999999999995,\"disable\":0.4665403119988335,\"step\":0.10526315789473681},\"maxNeuron\":200},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9991009404559463,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.781371198038646,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":1,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.2704588944345332,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.118511122757492,\"enabled\":true,\"innovation\":413},{\"from\":183,\"to\":100002,\"weight\":-0.8791122835290714,\"enabled\":false,\"innovation\":617},{\"from\":60,\"to\":100005,\"weight\":-1.5510461055344207,\"enabled\":true,\"innovation\":618},{\"from\":20,\"to\":100003,\"weight\":1.6688244330113022,\"enabled\":true,\"innovation\":1246},{\"from\":140,\"to\":100000,\"weight\":-1.539298225468972,\"enabled\":true,\"innovation\":1247},{\"from\":47,\"to\":100004,\"weight\":0.5225024254717408,\"enabled\":false,\"innovation\":1867},{\"from\":102,\"to\":100000,\"weight\":-1.77515154642908,\"enabled\":true,\"innovation\":1868},{\"from\":171,\"to\":100003,\"weight\":-1.4660727839789525,\"enabled\":true,\"innovation\":3125},{\"from\":86,\"to\":100004,\"weight\":1.9047279495378575,\"enabled\":true,\"innovation\":3126}],\"fitness\":303,\"mutationRates\":{\"connections\":0.20362656249999994,\"link\":2.4554753263096494,\"node\":0.4512499999999999,\"enable\":0.18049999999999994,\"disable\":0.49109506526193,\"step\":0.11080332409972295},\"maxNeuron\":200},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9991009404559463,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.781371198038646,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":1,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.2704588944345332,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.118511122757492,\"enabled\":true,\"innovation\":413}],\"fitness\":303,\"mutationRates\":{\"connections\":0.225625,\"link\":1.9999999999999998,\"node\":0.45125,\"enable\":0.1805,\"disable\":0.4432132963988919,\"step\":0.09999999999999999},\"maxNeuron\":200},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9991009404559463,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8357849687057155,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.503299985092017,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":0.9290004187777879,\"enabled\":true,\"innovation\":86},{\"from\":52,\"to\":100006,\"weight\":-1.8195721215341525,\"enabled\":true,\"innovation\":1457},{\"from\":154,\"to\":100005,\"weight\":-0.31873920646684173,\"enabled\":false,\"innovation\":1458},{\"from\":154,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":1459},{\"from\":202,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":1460},{\"from\":135,\"to\":100002,\"weight\":0.48485678829652024,\"enabled\":true,\"innovation\":2902},{\"from\":87,\"to\":100001,\"weight\":-0.23523416954318854,\"enabled\":true,\"innovation\":2903}],\"fitness\":303,\"mutationRates\":{\"connections\":0.21434374999999997,\"link\":1.7147499999999998,\"node\":0.42868749999999994,\"enable\":0.171475,\"disable\":0.46654031199883356,\"step\":0.10526315789473682},\"maxNeuron\":200},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9991009404559463,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.781371198038646,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":1,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.2704588944345332,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.118511122757492,\"enabled\":true,\"innovation\":413},{\"from\":183,\"to\":100002,\"weight\":-0.8791122835290714,\"enabled\":false,\"innovation\":617},{\"from\":60,\"to\":100005,\"weight\":-1.5510461055344207,\"enabled\":true,\"innovation\":618},{\"from\":20,\"to\":100003,\"weight\":1.6688244330113022,\"enabled\":true,\"innovation\":1246},{\"from\":140,\"to\":100000,\"weight\":-1.539298225468972,\"enabled\":true,\"innovation\":1247},{\"from\":47,\"to\":100004,\"weight\":0.5225024254717408,\"enabled\":true,\"innovation\":1867},{\"from\":102,\"to\":100000,\"weight\":-1.77515154642908,\"enabled\":true,\"innovation\":1868},{\"from\":94,\"to\":100006,\"weight\":1.2838446493896916,\"enabled\":true,\"innovation\":3332},{\"from\":28,\"to\":100003,\"weight\":0.32307445180394545,\"enabled\":true,\"innovation\":3333},{\"from\":176,\"to\":100002,\"weight\":0.43791765002112815,\"enabled\":true,\"innovation\":3334}],\"fitness\":303,\"mutationRates\":{\"connections\":0.22562499999999994,\"link\":2.4554753263096494,\"node\":0.4072531249999999,\"enable\":0.18049999999999994,\"disable\":0.4432132963988918,\"step\":0.1227737663154825},\"maxNeuron\":200},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-1.0559314714266088,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.7603757996034859,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.438801767723064,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":0.9018242180820518,\"enabled\":true,\"innovation\":86},{\"from\":52,\"to\":100006,\"weight\":-1.83161586360856,\"enabled\":true,\"innovation\":1457},{\"from\":154,\"to\":100005,\"weight\":-0.30595104216102637,\"enabled\":false,\"innovation\":1458},{\"from\":154,\"to\":202,\"weight\":1.0143839794553833,\"enabled\":true,\"innovation\":1459},{\"from\":202,\"to\":100005,\"weight\":1.2137716478940979,\"enabled\":true,\"innovation\":1460},{\"from\":99,\"to\":100006,\"weight\":0.7496902709920765,\"enabled\":true,\"innovation\":1861},{\"from\":142,\"to\":100000,\"weight\":-0.24712155919121498,\"enabled\":true,\"innovation\":1862},{\"from\":71,\"to\":100004,\"weight\":0.023403711196438026,\"enabled\":false,\"innovation\":2288},{\"from\":10,\"to\":100005,\"weight\":1.7011661595775271,\"enabled\":false,\"innovation\":2289},{\"from\":10,\"to\":203,\"weight\":-0.9645862309893927,\"enabled\":true,\"innovation\":2290},{\"from\":203,\"to\":100005,\"weight\":0.91076853730087,\"enabled\":false,\"innovation\":2291},{\"from\":123,\"to\":100003,\"weight\":0.5566159533637149,\"enabled\":true,\"innovation\":3335},{\"from\":195,\"to\":100000,\"weight\":-1.9616743015432192,\"enabled\":true,\"innovation\":3336},{\"from\":71,\"to\":203,\"weight\":1,\"enabled\":true,\"innovation\":3337},{\"from\":203,\"to\":100004,\"weight\":1,\"enabled\":true,\"innovation\":3338}],\"fitness\":303,\"mutationRates\":{\"connections\":0.23749999999999996,\"link\":1.8999999999999997,\"node\":0.42868749999999994,\"enable\":0.18999999999999995,\"disable\":0.42105263157894723,\"step\":0.09499999999999997},\"maxNeuron\":203},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.949209189120867,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8051582166779727,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.0518438792807978,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":-1.5636003516194537,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.3566280060490383,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.2088901004206125,\"enabled\":true,\"innovation\":413},{\"from\":11,\"to\":100005,\"weight\":1.645643324744455,\"enabled\":true,\"innovation\":2886},{\"from\":73,\"to\":100002,\"weight\":1.849991772792536,\"enabled\":true,\"innovation\":2887},{\"from\":99,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":2888},{\"from\":202,\"to\":100002,\"weight\":1,\"enabled\":true,\"innovation\":2889},{\"from\":111,\"to\":100005,\"weight\":1.1488599772191996,\"enabled\":true,\"innovation\":3339},{\"from\":165,\"to\":100005,\"weight\":0.8018258292894673,\"enabled\":true,\"innovation\":3340},{\"from\":100000,\"to\":100000,\"weight\":-1.1496950258419165,\"enabled\":true,\"innovation\":3341}],\"fitness\":303,\"mutationRates\":{\"connections\":0.225625,\"link\":2.216066481994459,\"node\":0.40725312499999994,\"enable\":0.18049999999999997,\"disable\":0.44321329639889184,\"step\":0.09024999999999998},\"maxNeuron\":203},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9991009404559463,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.781371198038646,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":1,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.2704588944345332,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.118511122757492,\"enabled\":true,\"innovation\":413},{\"from\":183,\"to\":100002,\"weight\":-0.8791122835290714,\"enabled\":false,\"innovation\":617},{\"from\":60,\"to\":100005,\"weight\":-1.5510461055344207,\"enabled\":true,\"innovation\":618},{\"from\":20,\"to\":100003,\"weight\":1.6688244330113022,\"enabled\":true,\"innovation\":1246},{\"from\":140,\"to\":100000,\"weight\":-1.539298225468972,\"enabled\":true,\"innovation\":1247},{\"from\":47,\"to\":100004,\"weight\":0.5225024254717408,\"enabled\":true,\"innovation\":1867},{\"from\":102,\"to\":100000,\"weight\":-1.77515154642908,\"enabled\":true,\"innovation\":1868},{\"from\":171,\"to\":100004,\"weight\":-0.6342977568791275,\"enabled\":true,\"innovation\":2486},{\"from\":164,\"to\":100003,\"weight\":0.9189243562333234,\"enabled\":true,\"innovation\":2487},{\"from\":37,\"to\":100001,\"weight\":0.8054746125358632,\"enabled\":false,\"innovation\":3344},{\"from\":181,\"to\":100003,\"weight\":0.5913806242180302,\"enabled\":true,\"innovation\":3345}],\"fitness\":303,\"mutationRates\":{\"connections\":0.19344523437499994,\"link\":2.105263157894736,\"node\":0.47499999999999987,\"enable\":0.17147499999999993,\"disable\":0.46654031199883345,\"step\":0.11663507799970836},\"maxNeuron\":200},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9991009404559463,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.781371198038646,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":-1.5636003516194537,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.2704588944345332,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.2088901004206125,\"enabled\":true,\"innovation\":413},{\"from\":183,\"to\":100002,\"weight\":-0.8791122835290714,\"enabled\":false,\"innovation\":617},{\"from\":60,\"to\":100005,\"weight\":-1.5510461055344207,\"enabled\":true,\"innovation\":618},{\"from\":20,\"to\":100003,\"weight\":1.574491078023397,\"enabled\":true,\"innovation\":1246},{\"from\":140,\"to\":100000,\"weight\":-1.539298225468972,\"enabled\":true,\"innovation\":1247},{\"from\":47,\"to\":100004,\"weight\":0.5225024254717408,\"enabled\":true,\"innovation\":1867},{\"from\":102,\"to\":100000,\"weight\":-1.77515154642908,\"enabled\":true,\"innovation\":1868},{\"from\":25,\"to\":100002,\"weight\":1.1791370864860866,\"enabled\":true,\"innovation\":3346},{\"from\":95,\"to\":100003,\"weight\":0.6559737386698821,\"enabled\":true,\"innovation\":3347}],\"fitness\":303,\"mutationRates\":{\"connections\":0.22562499999999994,\"link\":2.4554753263096494,\"node\":0.4512499999999999,\"enable\":0.19999999999999993,\"disable\":0.4432132963988918,\"step\":0.1227737663154825},\"maxNeuron\":201},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":0.4998795462966932,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8357849687057155,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.503299985092017,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":0.8487307946766257,\"enabled\":true,\"innovation\":86},{\"from\":52,\"to\":100006,\"weight\":-1.8195721215341525,\"enabled\":true,\"innovation\":1457},{\"from\":154,\"to\":100005,\"weight\":-0.31873920646684173,\"enabled\":false,\"innovation\":1458},{\"from\":154,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":1459},{\"from\":202,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":1460},{\"from\":135,\"to\":100002,\"weight\":0.48485678829652024,\"enabled\":true,\"innovation\":2902},{\"from\":87,\"to\":100001,\"weight\":-0.23523416954318854,\"enabled\":true,\"innovation\":2903},{\"from\":80,\"to\":100004,\"weight\":1.4791350954383073,\"enabled\":false,\"innovation\":3304},{\"from\":170,\"to\":100000,\"weight\":1.4539990482419158,\"enabled\":true,\"innovation\":3305},{\"from\":80,\"to\":203,\"weight\":1,\"enabled\":true,\"innovation\":3306},{\"from\":203,\"to\":100004,\"weight\":1,\"enabled\":true,\"innovation\":3307},{\"from\":187,\"to\":100003,\"weight\":0.005986345045712049,\"enabled\":true,\"innovation\":3358},{\"from\":15,\"to\":100003,\"weight\":0.5866721926456426,\"enabled\":true,\"innovation\":3359}],\"fitness\":303,\"mutationRates\":{\"connections\":0.19344523437499997,\"link\":1.8999999999999997,\"node\":0.38689046874999994,\"enable\":0.18999999999999995,\"disable\":0.4665403119988335,\"step\":0.09499999999999997},\"maxNeuron\":203},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-1.010043452558846,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8074332028661483,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":0.9883049312538489,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":1.001091428873352,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.2143471515609285,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.046443071651474,\"enabled\":true,\"innovation\":413},{\"from\":183,\"to\":100002,\"weight\":-0.9757586704474033,\"enabled\":false,\"innovation\":617},{\"from\":60,\"to\":100005,\"weight\":-1.5329906734330374,\"enabled\":true,\"innovation\":618},{\"from\":20,\"to\":100003,\"weight\":1.5492620391852199,\"enabled\":true,\"innovation\":1246},{\"from\":140,\"to\":100000,\"weight\":-0.9321923339178131,\"enabled\":true,\"innovation\":1247},{\"from\":123,\"to\":100003,\"weight\":-0.7270860670005982,\"enabled\":true,\"innovation\":2088},{\"from\":86,\"to\":100005,\"weight\":0.0030653624912016786,\"enabled\":false,\"innovation\":2089},{\"from\":86,\"to\":202,\"weight\":0.9634254373156069,\"enabled\":true,\"innovation\":2090},{\"from\":202,\"to\":100005,\"weight\":0.8852314577577897,\"enabled\":true,\"innovation\":2091},{\"from\":70,\"to\":100000,\"weight\":1.3025653647946944,\"enabled\":true,\"innovation\":3360},{\"from\":136,\"to\":100005,\"weight\":1.486646072113479,\"enabled\":true,\"innovation\":3361}],\"fitness\":303,\"mutationRates\":{\"connections\":0.24999999999999994,\"link\":2.2160664819944587,\"node\":0.4072531249999999,\"enable\":0.19999999999999993,\"disable\":0.4432132963988918,\"step\":0.11080332409972295},\"maxNeuron\":202},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9904245651205785,\"enabled\":false,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8357849687057155,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.503299985092017,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":0.9290004187777879,\"enabled\":true,\"innovation\":86},{\"from\":52,\"to\":100006,\"weight\":-1.8195721215341525,\"enabled\":true,\"innovation\":1457},{\"from\":154,\"to\":100005,\"weight\":-0.31873920646684173,\"enabled\":false,\"innovation\":1458},{\"from\":154,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":1459},{\"from\":202,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":1460},{\"from\":99,\"to\":100006,\"weight\":0.7240282126205839,\"enabled\":true,\"innovation\":1861},{\"from\":142,\"to\":100000,\"weight\":-0.32816940607629963,\"enabled\":true,\"innovation\":1862},{\"from\":40,\"to\":100002,\"weight\":0.79567137528782,\"enabled\":true,\"innovation\":2717},{\"from\":19,\"to\":100004,\"weight\":1.091646883450065,\"enabled\":false,\"innovation\":2718},{\"from\":99,\"to\":203,\"weight\":1,\"enabled\":true,\"innovation\":2719},{\"from\":203,\"to\":100002,\"weight\":1,\"enabled\":true,\"innovation\":2720},{\"from\":117,\"to\":100000,\"weight\":1.2357927875382506,\"enabled\":true,\"innovation\":3506},{\"from\":186,\"to\":100006,\"weight\":0.5739539198969297,\"enabled\":true,\"innovation\":3507}],\"fitness\":303,\"mutationRates\":{\"connections\":0.26315789473684204,\"link\":1.9,\"node\":0.475,\"enable\":0.17147499999999996,\"disable\":0.4665403119988335,\"step\":0.11663507799970838},\"maxNeuron\":203},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-1.010043452558846,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8074332028661483,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":0.9883049312538489,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":1.001091428873352,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.2143471515609285,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.046443071651474,\"enabled\":true,\"innovation\":413},{\"from\":183,\"to\":100002,\"weight\":-0.9757586704474033,\"enabled\":false,\"innovation\":617},{\"from\":60,\"to\":100005,\"weight\":-1.5329906734330374,\"enabled\":true,\"innovation\":618},{\"from\":20,\"to\":100003,\"weight\":1.5492620391852199,\"enabled\":true,\"innovation\":1246},{\"from\":140,\"to\":100000,\"weight\":-0.9321923339178131,\"enabled\":true,\"innovation\":1247},{\"from\":123,\"to\":100003,\"weight\":-0.7270860670005982,\"enabled\":true,\"innovation\":2088},{\"from\":86,\"to\":100005,\"weight\":0.0030653624912016786,\"enabled\":false,\"innovation\":2089},{\"from\":86,\"to\":202,\"weight\":0.9634254373156069,\"enabled\":false,\"innovation\":2090},{\"from\":202,\"to\":100005,\"weight\":0.8852314577577897,\"enabled\":true,\"innovation\":2091},{\"from\":70,\"to\":100000,\"weight\":1.3025653647946944,\"enabled\":true,\"innovation\":3360},{\"from\":136,\"to\":100005,\"weight\":1.486646072113479,\"enabled\":true,\"innovation\":3361},{\"from\":106,\"to\":100000,\"weight\":1.1270100273125054,\"enabled\":true,\"innovation\":3508},{\"from\":184,\"to\":100004,\"weight\":-1.9292128330607365,\"enabled\":true,\"innovation\":3509},{\"from\":86,\"to\":203,\"weight\":1,\"enabled\":true,\"innovation\":3510},{\"from\":203,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":3511}],\"fitness\":303,\"mutationRates\":{\"connections\":0.26315789473684204,\"link\":2.3327015599941667,\"node\":0.3868904687499999,\"enable\":0.18999999999999992,\"disable\":0.46654031199883345,\"step\":0.1052631578947368},\"maxNeuron\":203},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-1.9505188037146566,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.7491521493124017,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":0.9652815477062813,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":0.7833657508347454,\"enabled\":true,\"innovation\":86},{\"from\":71,\"to\":100006,\"weight\":-1.1580630498298763,\"enabled\":true,\"innovation\":412},{\"from\":175,\"to\":100005,\"weight\":1.109916648840538,\"enabled\":true,\"innovation\":413},{\"from\":183,\"to\":100002,\"weight\":-0.8351089403658849,\"enabled\":false,\"innovation\":617},{\"from\":60,\"to\":100005,\"weight\":-1.551181118614408,\"enabled\":true,\"innovation\":618},{\"from\":79,\"to\":100000,\"weight\":-1.8049776210875108,\"enabled\":true,\"innovation\":2921},{\"from\":126,\"to\":100003,\"weight\":1.1586625727636946,\"enabled\":true,\"innovation\":2922},{\"from\":124,\"to\":100006,\"weight\":0.07132862193630718,\"enabled\":true,\"innovation\":3514},{\"from\":17,\"to\":100002,\"weight\":1.7473461988585832,\"enabled\":false,\"innovation\":3515},{\"from\":17,\"to\":204,\"weight\":1,\"enabled\":true,\"innovation\":3516},{\"from\":204,\"to\":100002,\"weight\":1,\"enabled\":true,\"innovation\":3517}],\"fitness\":303,\"mutationRates\":{\"connections\":0.23749999999999996,\"link\":2.105263157894736,\"node\":0.4749999999999999,\"enable\":0.18999999999999995,\"disable\":0.5169421739599264,\"step\":0.09499999999999997},\"maxNeuron\":204},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9991009404559463,\"enabled\":true,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8357849687057155,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.503299985092017,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":0.9290004187777879,\"enabled\":true,\"innovation\":86},{\"from\":52,\"to\":100006,\"weight\":-1.8195721215341525,\"enabled\":true,\"innovation\":1457},{\"from\":154,\"to\":100005,\"weight\":-0.31873920646684173,\"enabled\":false,\"innovation\":1458},{\"from\":154,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":1459},{\"from\":202,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":1460},{\"from\":176,\"to\":100005,\"weight\":-0.6129392118401711,\"enabled\":true,\"innovation\":2292},{\"from\":85,\"to\":100006,\"weight\":1.7443143821609155,\"enabled\":true,\"innovation\":2293},{\"from\":99,\"to\":203,\"weight\":1,\"enabled\":true,\"innovation\":2294},{\"from\":203,\"to\":100002,\"weight\":1,\"enabled\":false,\"innovation\":2295},{\"from\":181,\"to\":100002,\"weight\":1.333226399580262,\"enabled\":true,\"innovation\":3525}],\"fitness\":303,\"mutationRates\":{\"connections\":0.24999999999999997,\"link\":1.6290124999999998,\"node\":0.45125,\"enable\":0.19999999999999996,\"disable\":0.44321329639889184,\"step\":0.09999999999999998},\"maxNeuron\":203},{\"genes\":[{\"from\":99,\"to\":100002,\"weight\":-0.9904245651205785,\"enabled\":false,\"innovation\":83},{\"from\":114,\"to\":100000,\"weight\":-0.8357849687057155,\"enabled\":false,\"innovation\":84},{\"from\":114,\"to\":201,\"weight\":1.503299985092017,\"enabled\":false,\"innovation\":85},{\"from\":201,\"to\":100000,\"weight\":0.9290004187777879,\"enabled\":true,\"innovation\":86},{\"from\":52,\"to\":100006,\"weight\":-1.8195721215341525,\"enabled\":true,\"innovation\":1457},{\"from\":154,\"to\":100005,\"weight\":-0.31873920646684173,\"enabled\":false,\"innovation\":1458},{\"from\":154,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":1459},{\"from\":202,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":1460},{\"from\":176,\"to\":100005,\"weight\":-0.6129392118401711,\"enabled\":true,\"innovation\":2292},{\"from\":85,\"to\":100006,\"weight\":1.7443143821609155,\"enabled\":true,\"innovation\":2293},{\"from\":99,\"to\":203,\"weight\":1,\"enabled\":true,\"innovation\":2294},{\"from\":203,\"to\":100002,\"weight\":1,\"enabled\":true,\"innovation\":2295}],\"fitness\":303,\"mutationRates\":{\"connections\":0.2375,\"link\":1.7147499999999998,\"node\":0.475,\"enable\":0.18999999999999997,\"disable\":0.46654031199883356,\"step\":0.09499999999999999},\"maxNeuron\":200}];\n\n//# sourceURL=webpack:///./species-3.json?");

/***/ }),

/***/ "./species-4.json":
/*!************************!*\
  !*** ./species-4.json ***!
  \************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, default */
/***/ (function(module) {

eval("module.exports = [{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.9838114973478584,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.416834486461214,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.45064510048750217,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.7133911581268562,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.9804671734581383,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":1.0010484168491167,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.171571064162528,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.8620707254477955,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":1.9398778438424757,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.3231356931206781,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.8608681628589616,\"enabled\":true,\"innovation\":1092},{\"from\":186,\"to\":100006,\"weight\":-1.4039212984366252,\"enabled\":true,\"innovation\":1298},{\"from\":64,\"to\":100000,\"weight\":-1.946946098976175,\"enabled\":true,\"innovation\":1299},{\"from\":50,\"to\":100005,\"weight\":-0.37644292442970784,\"enabled\":true,\"innovation\":1300},{\"from\":57,\"to\":100005,\"weight\":0.11726657978738338,\"enabled\":true,\"innovation\":1508},{\"from\":86,\"to\":100006,\"weight\":-1.0813637026525078,\"enabled\":true,\"innovation\":1509},{\"from\":144,\"to\":100000,\"weight\":1.9360370159386513,\"enabled\":true,\"innovation\":1524},{\"from\":190,\"to\":100003,\"weight\":-0.9910123499040098,\"enabled\":true,\"innovation\":1525},{\"from\":100005,\"to\":100006,\"weight\":1.3695344880104088,\"enabled\":true,\"innovation\":2334},{\"from\":127,\"to\":100006,\"weight\":-1.368886800202593,\"enabled\":true,\"innovation\":2335},{\"from\":0,\"to\":100001,\"weight\":-0.12131104941586379,\"enabled\":true,\"innovation\":2336}],\"fitness\":318,\"mutationRates\":{\"connections\":0.22562499999999994,\"link\":2.2160664819944587,\"node\":0.4999999999999998,\"enable\":0.1999999999999999,\"disable\":0.3999999999999998,\"step\":0.09024999999999996},\"maxNeuron\":202},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":0.794957845010348,\"enabled\":false,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.40639067297307396,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.2732820930860189,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.667740566608798,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.8046096086176506,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9588757726151992,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.078464313325832,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.7699208820953707,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":-1.1028679197091407,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.2442480900314692,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.949535394257755,\"enabled\":true,\"innovation\":1092},{\"from\":159,\"to\":100001,\"weight\":-0.3135258579702622,\"enabled\":true,\"innovation\":2752},{\"from\":35,\"to\":100005,\"weight\":0.2277128509419999,\"enabled\":true,\"innovation\":2753},{\"from\":100003,\"to\":100005,\"weight\":1.2759298925134646,\"enabled\":true,\"innovation\":2754}],\"fitness\":310,\"mutationRates\":{\"connections\":0.23749999999999996,\"link\":2.332701559994167,\"node\":0.5263157894736841,\"enable\":0.17147499999999996,\"disable\":0.42105263157894723,\"step\":0.10526315789473681},\"maxNeuron\":200},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.988403008291701,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.3898204415183608,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.4306100076194683,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.7181026520116616,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.9037977150636464,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9189108807209093,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.1139708986495025,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.795825619207052,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":1.9144268691480697,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.3636520292209262,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.8451986579806823,\"enabled\":true,\"innovation\":1092}],\"fitness\":306,\"mutationRates\":{\"connections\":0.22562499999999996,\"link\":2.216066481994459,\"node\":0.4999999999999999,\"enable\":0.16290124999999997,\"disable\":0.3999999999999999,\"step\":0.09999999999999998},\"maxNeuron\":200},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.9994906455369321,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.3898204415183608,\"enabled\":false,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.4306100076194683,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.7181026520116616,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.9037977150636464,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9189108807209093,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.1139708986495025,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.795825619207052,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":1.9144268691480697,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.3636520292209262,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.8451986579806823,\"enabled\":true,\"innovation\":1092},{\"from\":186,\"to\":100006,\"weight\":-1.4397196046863208,\"enabled\":true,\"innovation\":1298},{\"from\":64,\"to\":100000,\"weight\":-1.9163397434566791,\"enabled\":true,\"innovation\":1299},{\"from\":50,\"to\":100005,\"weight\":-0.4631764756698509,\"enabled\":false,\"innovation\":1300},{\"from\":57,\"to\":100005,\"weight\":0.19577792673708938,\"enabled\":true,\"innovation\":1508},{\"from\":86,\"to\":100006,\"weight\":-1.1601406466604942,\"enabled\":true,\"innovation\":1509},{\"from\":144,\"to\":100000,\"weight\":1.9459854589821752,\"enabled\":true,\"innovation\":1524},{\"from\":190,\"to\":100003,\"weight\":-1.0125268180813114,\"enabled\":true,\"innovation\":1525},{\"from\":131,\"to\":100004,\"weight\":1.3085764711172896,\"enabled\":true,\"innovation\":3385},{\"from\":11,\"to\":100000,\"weight\":-1.0772689847411083,\"enabled\":true,\"innovation\":3386},{\"from\":50,\"to\":203,\"weight\":1,\"enabled\":true,\"innovation\":3387},{\"from\":203,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":3388}],\"fitness\":305,\"mutationRates\":{\"connections\":0.20362656249999994,\"link\":1.999999999999999,\"node\":0.4512499999999998,\"enable\":0.1999999999999999,\"disable\":0.44321329639889173,\"step\":0.09024999999999996},\"maxNeuron\":203},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.988403008291701,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.3898204415183608,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.4306100076194683,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.7181026520116616,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.9037977150636464,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9189108807209093,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.1139708986495025,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.795825619207052,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":1.9144268691480697,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.3636520292209262,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.8451986579806823,\"enabled\":true,\"innovation\":1092}],\"fitness\":302,\"mutationRates\":{\"connections\":0.22562499999999996,\"link\":2.216066481994459,\"node\":0.4999999999999999,\"enable\":0.16290124999999997,\"disable\":0.3999999999999999,\"step\":0.09999999999999998},\"maxNeuron\":201},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.9994906455369321,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.3898204415183608,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.4306100076194683,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.7181026520116616,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.9037977150636464,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9189108807209093,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.1139708986495025,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.795825619207052,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":1.9144268691480697,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.3636520292209262,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.8451986579806823,\"enabled\":true,\"innovation\":1092},{\"from\":186,\"to\":100006,\"weight\":-1.4397196046863208,\"enabled\":true,\"innovation\":1298},{\"from\":64,\"to\":100000,\"weight\":-1.9163397434566791,\"enabled\":true,\"innovation\":1299},{\"from\":50,\"to\":100005,\"weight\":-0.4631764756698509,\"enabled\":true,\"innovation\":1300}],\"fitness\":302,\"mutationRates\":{\"connections\":0.23749999999999996,\"link\":2.105263157894736,\"node\":0.47499999999999987,\"enable\":0.17147499999999996,\"disable\":0.42105263157894723,\"step\":0.09499999999999997},\"maxNeuron\":201},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.9994906455369321,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.3898204415183608,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.4306100076194683,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.7181026520116616,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.9037977150636464,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9189108807209093,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.1139708986495025,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.795825619207052,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":1.9144268691480697,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.3636520292209262,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.8451986579806823,\"enabled\":true,\"innovation\":1092},{\"from\":186,\"to\":100006,\"weight\":-1.4397196046863208,\"enabled\":true,\"innovation\":1298},{\"from\":64,\"to\":100000,\"weight\":-1.9163397434566791,\"enabled\":true,\"innovation\":1299},{\"from\":50,\"to\":100005,\"weight\":-0.4631764756698509,\"enabled\":true,\"innovation\":1300},{\"from\":57,\"to\":100005,\"weight\":0.19577792673708938,\"enabled\":true,\"innovation\":1508},{\"from\":86,\"to\":100006,\"weight\":-1.1601406466604942,\"enabled\":true,\"innovation\":1509},{\"from\":144,\"to\":100000,\"weight\":1.9459854589821752,\"enabled\":true,\"innovation\":1524},{\"from\":190,\"to\":100003,\"weight\":-1.0125268180813114,\"enabled\":true,\"innovation\":1525}],\"fitness\":302,\"mutationRates\":{\"connections\":0.21434374999999994,\"link\":2.105263157894736,\"node\":0.4749999999999998,\"enable\":0.18999999999999992,\"disable\":0.4210526315789472,\"step\":0.08573749999999997},\"maxNeuron\":202},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.9994906455369321,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.4782934350976058,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.4306100076194683,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.7181026520116616,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.9037977150636464,\"enabled\":false,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9189108807209093,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.1139708986495025,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.795825619207052,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":1.9144268691480697,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.3636520292209262,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.8451986579806823,\"enabled\":true,\"innovation\":1092},{\"from\":185,\"to\":100002,\"weight\":-1.3833262525171506,\"enabled\":true,\"innovation\":1924},{\"from\":195,\"to\":100004,\"weight\":-1.0658567778627965,\"enabled\":true,\"innovation\":1925}],\"fitness\":302,\"mutationRates\":{\"connections\":0.23749999999999996,\"link\":2.105263157894736,\"node\":0.5263157894736841,\"enable\":0.15475618749999998,\"disable\":0.3799999999999999,\"step\":0.09499999999999997},\"maxNeuron\":200},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.9994906455369321,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.3898204415183608,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.4306100076194683,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.7181026520116616,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.9037977150636464,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9189108807209093,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.1139708986495025,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.795825619207052,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":1.9144268691480697,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.3636520292209262,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.8451986579806823,\"enabled\":true,\"innovation\":1092},{\"from\":186,\"to\":100006,\"weight\":-1.4397196046863208,\"enabled\":true,\"innovation\":1298},{\"from\":64,\"to\":100000,\"weight\":-1.9163397434566791,\"enabled\":true,\"innovation\":1299},{\"from\":50,\"to\":100005,\"weight\":-0.4631764756698509,\"enabled\":true,\"innovation\":1300}],\"fitness\":302,\"mutationRates\":{\"connections\":0.23749999999999996,\"link\":2.105263157894736,\"node\":0.47499999999999987,\"enable\":0.17147499999999996,\"disable\":0.42105263157894723,\"step\":0.09499999999999997},\"maxNeuron\":200},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.9840953369317023,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.4142937059646042,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":-0.24345332750713933,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.6938657842125204,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.8204885650719499,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":1.0048179237392756,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.1895074523687117,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.8152092499901933,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":1.8543875216083638,\"enabled\":true,\"innovation\":444},{\"from\":137,\"to\":100003,\"weight\":0.519570102711655,\"enabled\":true,\"innovation\":2143},{\"from\":131,\"to\":100002,\"weight\":1.9278274557690462,\"enabled\":false,\"innovation\":2144},{\"from\":131,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":2145},{\"from\":202,\"to\":100002,\"weight\":1,\"enabled\":true,\"innovation\":2146}],\"fitness\":302,\"mutationRates\":{\"connections\":0.22562499999999996,\"link\":2.216066481994459,\"node\":0.45124999999999993,\"enable\":0.16290124999999997,\"disable\":0.3999999999999999,\"step\":0.09024999999999998},\"maxNeuron\":202},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":2.0257722862585092,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.38108813210628445,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.4152209037928357,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.6708193996783445,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.8796409723927001,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":-0.6498546758434616,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.1066489559230615,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":1.789819976426788,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":-1.0925845449064928,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.3902731923931217,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.8740204648810285,\"enabled\":true,\"innovation\":1092},{\"from\":171,\"to\":100001,\"weight\":-1.8429953588348678,\"enabled\":true,\"innovation\":2549},{\"from\":193,\"to\":100005,\"weight\":-1.3482856656282838,\"enabled\":true,\"innovation\":2550}],\"fitness\":302,\"mutationRates\":{\"connections\":0.21434374999999994,\"link\":2.105263157894736,\"node\":0.5263157894736841,\"enable\":0.15475618749999998,\"disable\":0.3799999999999999,\"step\":0.09499999999999997},\"maxNeuron\":200},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.9840953369317023,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.3898204415183608,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.4306100076194683,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.7181026520116616,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.9037977150636464,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":1.0048179237392756,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.1895074523687117,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.795825619207052,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":1.9144268691480697,\"enabled\":false,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.3636520292209262,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.8451986579806823,\"enabled\":true,\"innovation\":1092},{\"from\":186,\"to\":100006,\"weight\":-1.4397196046863208,\"enabled\":true,\"innovation\":1298},{\"from\":64,\"to\":100000,\"weight\":-1.9163397434566791,\"enabled\":true,\"innovation\":1299},{\"from\":50,\"to\":100005,\"weight\":-0.4631764756698509,\"enabled\":true,\"innovation\":1300},{\"from\":183,\"to\":100003,\"weight\":1.9980443059164212,\"enabled\":true,\"innovation\":2551},{\"from\":96,\"to\":100006,\"weight\":-0.6145764421671265,\"enabled\":true,\"innovation\":2552},{\"from\":33,\"to\":205,\"weight\":1,\"enabled\":true,\"innovation\":2553},{\"from\":205,\"to\":100002,\"weight\":1,\"enabled\":true,\"innovation\":2554}],\"fitness\":302,\"mutationRates\":{\"connections\":0.24999999999999994,\"link\":2.2160664819944587,\"node\":0.4512499999999999,\"enable\":0.18049999999999994,\"disable\":0.39999999999999986,\"step\":0.09024999999999997},\"maxNeuron\":205},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.9994906455369321,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.3898204415183608,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.4306100076194683,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.7181026520116616,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.9037977150636464,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9189108807209093,\"enabled\":false,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.1139708986495025,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.795825619207052,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":1.9144268691480697,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.3636520292209262,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.8451986579806823,\"enabled\":true,\"innovation\":1092},{\"from\":186,\"to\":100006,\"weight\":-1.4397196046863208,\"enabled\":true,\"innovation\":1298},{\"from\":64,\"to\":100000,\"weight\":-1.9163397434566791,\"enabled\":true,\"innovation\":1299},{\"from\":50,\"to\":100005,\"weight\":-0.4631764756698509,\"enabled\":true,\"innovation\":1300},{\"from\":145,\"to\":100003,\"weight\":-1.290245475575312,\"enabled\":true,\"innovation\":2740},{\"from\":162,\"to\":100001,\"weight\":-1.67247647562837,\"enabled\":true,\"innovation\":2741},{\"from\":201,\"to\":205,\"weight\":1,\"enabled\":true,\"innovation\":2742},{\"from\":205,\"to\":100003,\"weight\":1,\"enabled\":true,\"innovation\":2743}],\"fitness\":302,\"mutationRates\":{\"connections\":0.22562499999999996,\"link\":1.999999999999999,\"node\":0.4512499999999999,\"enable\":0.18049999999999994,\"disable\":0.4432132963988918,\"step\":0.09024999999999997},\"maxNeuron\":205},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":0.794957845010348,\"enabled\":false,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.40639067297307396,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.2732820930860189,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.667740566608798,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.8046096086176506,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9588757726151992,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.078464313325832,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.7699208820953707,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":-1.1028679197091407,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.2442480900314692,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.949535394257755,\"enabled\":true,\"innovation\":1092},{\"from\":159,\"to\":100001,\"weight\":-0.3135258579702622,\"enabled\":true,\"innovation\":2752},{\"from\":35,\"to\":100005,\"weight\":0.2277128509419999,\"enabled\":true,\"innovation\":2753},{\"from\":100003,\"to\":100005,\"weight\":1.2759298925134646,\"enabled\":true,\"innovation\":2754}],\"fitness\":302,\"mutationRates\":{\"connections\":0.23749999999999996,\"link\":2.332701559994167,\"node\":0.5263157894736841,\"enable\":0.17147499999999996,\"disable\":0.42105263157894723,\"step\":0.10526315789473681},\"maxNeuron\":203},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.9994906455369321,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.3898204415183608,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.45064510048750217,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.7133911581268562,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.9037977150636464,\"enabled\":false,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9189108807209093,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.171571064162528,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.795825619207052,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":1.9144268691480697,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.3636520292209262,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.8451986579806823,\"enabled\":true,\"innovation\":1092},{\"from\":186,\"to\":100006,\"weight\":-1.4039212984366252,\"enabled\":true,\"innovation\":1298},{\"from\":64,\"to\":100000,\"weight\":-1.946946098976175,\"enabled\":true,\"innovation\":1299},{\"from\":50,\"to\":100005,\"weight\":-0.37644292442970784,\"enabled\":true,\"innovation\":1300},{\"from\":57,\"to\":100005,\"weight\":0.11726657978738338,\"enabled\":true,\"innovation\":1508},{\"from\":86,\"to\":100006,\"weight\":-1.0813637026525078,\"enabled\":true,\"innovation\":1509},{\"from\":144,\"to\":100000,\"weight\":1.9360370159386513,\"enabled\":true,\"innovation\":1524},{\"from\":190,\"to\":100003,\"weight\":-0.9910123499040098,\"enabled\":true,\"innovation\":1525},{\"from\":100005,\"to\":100006,\"weight\":1.3695344880104088,\"enabled\":true,\"innovation\":2334},{\"from\":127,\"to\":100006,\"weight\":-1.368886800202593,\"enabled\":true,\"innovation\":2335},{\"from\":0,\"to\":100001,\"weight\":-0.12131104941586379,\"enabled\":true,\"innovation\":2336},{\"from\":108,\"to\":100003,\"weight\":-0.7252036712327383,\"enabled\":true,\"innovation\":2755},{\"from\":16,\"to\":100006,\"weight\":0.7247659517423815,\"enabled\":true,\"innovation\":2756},{\"from\":58,\"to\":203,\"weight\":1,\"enabled\":true,\"innovation\":2757},{\"from\":203,\"to\":201,\"weight\":1,\"enabled\":true,\"innovation\":2758}],\"fitness\":302,\"mutationRates\":{\"connections\":0.23749999999999993,\"link\":2.105263157894736,\"node\":0.47499999999999976,\"enable\":0.1899999999999999,\"disable\":0.4210526315789471,\"step\":0.08573749999999995},\"maxNeuron\":203},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.9840953369317023,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.4813694892889968,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.4584433828985274,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.705953630009168,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":1,\"enabled\":false,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9189108807209093,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.1525597817972326,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.7256630545389546,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":1.9167353991244105,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.2768940335583072,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.8565764510409006,\"enabled\":true,\"innovation\":1092},{\"from\":5,\"to\":100006,\"weight\":-0.5240494530870965,\"enabled\":true,\"innovation\":2746},{\"from\":187,\"to\":100005,\"weight\":-0.5156119313267489,\"enabled\":true,\"innovation\":2747},{\"from\":73,\"to\":100004,\"weight\":1.2772956273866978,\"enabled\":true,\"innovation\":2950},{\"from\":21,\"to\":100000,\"weight\":0.8628691361923426,\"enabled\":true,\"innovation\":2951},{\"from\":58,\"to\":205,\"weight\":1,\"enabled\":true,\"innovation\":2952},{\"from\":205,\"to\":201,\"weight\":1,\"enabled\":true,\"innovation\":2953}],\"fitness\":302,\"mutationRates\":{\"connections\":0.22562499999999996,\"link\":2.2160664819944587,\"node\":0.5540166204986148,\"enable\":0.16290124999999997,\"disable\":0.4432132963988918,\"step\":0.09999999999999996},\"maxNeuron\":205},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.9268918180942392,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.5503948303117768,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.2732820930860189,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.667740566608798,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.8046096086176506,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9588757726151992,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.078464313325832,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.7699208820953707,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":2.003179252406453,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.2442480900314692,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.949535394257755,\"enabled\":true,\"innovation\":1092},{\"from\":159,\"to\":100001,\"weight\":-0.3135258579702622,\"enabled\":true,\"innovation\":2752},{\"from\":35,\"to\":100005,\"weight\":0.2277128509419999,\"enabled\":false,\"innovation\":2753},{\"from\":100003,\"to\":100005,\"weight\":1.2759298925134646,\"enabled\":true,\"innovation\":2754},{\"from\":23,\"to\":100002,\"weight\":-1.7325776484921294,\"enabled\":true,\"innovation\":2968},{\"from\":43,\"to\":100004,\"weight\":-1.0961681954791977,\"enabled\":true,\"innovation\":2969}],\"fitness\":302,\"mutationRates\":{\"connections\":0.24999999999999994,\"link\":2.4554753263096494,\"node\":0.5540166204986148,\"enable\":0.18049999999999994,\"disable\":0.39999999999999986,\"step\":0.11080332409972295},\"maxNeuron\":205},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.9994906455369321,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.3898204415183608,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.45064510048750217,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.7133911581268562,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.9037977150636464,\"enabled\":false,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9189108807209093,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.171571064162528,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.795825619207052,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":1.9144268691480697,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.3636520292209262,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.8451986579806823,\"enabled\":true,\"innovation\":1092},{\"from\":186,\"to\":100006,\"weight\":-1.4039212984366252,\"enabled\":true,\"innovation\":1298},{\"from\":64,\"to\":100000,\"weight\":-1.946946098976175,\"enabled\":true,\"innovation\":1299},{\"from\":50,\"to\":100005,\"weight\":-0.37644292442970784,\"enabled\":true,\"innovation\":1300},{\"from\":57,\"to\":100005,\"weight\":0.11726657978738338,\"enabled\":true,\"innovation\":1508},{\"from\":86,\"to\":100006,\"weight\":-1.0813637026525078,\"enabled\":true,\"innovation\":1509},{\"from\":144,\"to\":100000,\"weight\":1.9360370159386513,\"enabled\":true,\"innovation\":1524},{\"from\":190,\"to\":100003,\"weight\":-0.9910123499040098,\"enabled\":true,\"innovation\":1525},{\"from\":100005,\"to\":100006,\"weight\":1.3695344880104088,\"enabled\":true,\"innovation\":2334},{\"from\":127,\"to\":100006,\"weight\":-1.368886800202593,\"enabled\":true,\"innovation\":2335},{\"from\":0,\"to\":100001,\"weight\":-0.12131104941586379,\"enabled\":true,\"innovation\":2336},{\"from\":108,\"to\":100003,\"weight\":-0.7252036712327383,\"enabled\":true,\"innovation\":2755},{\"from\":16,\"to\":100006,\"weight\":0.7247659517423815,\"enabled\":true,\"innovation\":2756},{\"from\":58,\"to\":203,\"weight\":1,\"enabled\":true,\"innovation\":2757},{\"from\":203,\"to\":201,\"weight\":1,\"enabled\":true,\"innovation\":2758},{\"from\":56,\"to\":100002,\"weight\":-1.0558685510560064,\"enabled\":true,\"innovation\":2981},{\"from\":156,\"to\":100005,\"weight\":-1.3546842782980315,\"enabled\":true,\"innovation\":2982}],\"fitness\":302,\"mutationRates\":{\"connections\":0.24999999999999992,\"link\":2.2160664819944587,\"node\":0.45124999999999976,\"enable\":0.18049999999999988,\"disable\":0.4432132963988917,\"step\":0.08145062499999996},\"maxNeuron\":203},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.9994906455369321,\"enabled\":false,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.3898204415183608,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.4306100076194683,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.7181026520116616,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.9037977150636464,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9189108807209093,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.1139708986495025,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.795825619207052,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":1.9144268691480697,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.3636520292209262,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.8451986579806823,\"enabled\":true,\"innovation\":1092},{\"from\":186,\"to\":100006,\"weight\":-1.4397196046863208,\"enabled\":true,\"innovation\":1298},{\"from\":64,\"to\":100000,\"weight\":-1.9163397434566791,\"enabled\":true,\"innovation\":1299},{\"from\":50,\"to\":100005,\"weight\":-0.4631764756698509,\"enabled\":true,\"innovation\":1300},{\"from\":3,\"to\":100006,\"weight\":-0.40291520990048646,\"enabled\":false,\"innovation\":2961},{\"from\":47,\"to\":100000,\"weight\":1.9019621927504051,\"enabled\":true,\"innovation\":2962},{\"from\":192,\"to\":100000,\"weight\":1.6825695097793325,\"enabled\":true,\"innovation\":2963},{\"from\":3,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":2964},{\"from\":202,\"to\":100006,\"weight\":1,\"enabled\":true,\"innovation\":2965}],\"fitness\":302,\"mutationRates\":{\"connections\":0.22562499999999996,\"link\":2.2160664819944587,\"node\":0.4512499999999999,\"enable\":0.16290124999999994,\"disable\":0.39999999999999986,\"step\":0.09024999999999997},\"maxNeuron\":200},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.9994906455369321,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.3898204415183608,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.4306100076194683,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.7181026520116616,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.9037977150636464,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9189108807209093,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.1139708986495025,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.795825619207052,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":1.9144268691480697,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.3636520292209262,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.8451986579806823,\"enabled\":true,\"innovation\":1092},{\"from\":186,\"to\":100006,\"weight\":-1.4397196046863208,\"enabled\":false,\"innovation\":1298},{\"from\":64,\"to\":100000,\"weight\":-1.9163397434566791,\"enabled\":true,\"innovation\":1299},{\"from\":50,\"to\":100005,\"weight\":-0.4631764756698509,\"enabled\":true,\"innovation\":1300},{\"from\":95,\"to\":100004,\"weight\":0.8064748730495577,\"enabled\":true,\"innovation\":3169},{\"from\":79,\"to\":100002,\"weight\":0.461509509261985,\"enabled\":true,\"innovation\":3170},{\"from\":186,\"to\":203,\"weight\":1,\"enabled\":true,\"innovation\":3171},{\"from\":203,\"to\":100006,\"weight\":1,\"enabled\":true,\"innovation\":3172}],\"fitness\":302,\"mutationRates\":{\"connections\":0.22562499999999996,\"link\":2.2160664819944587,\"node\":0.49999999999999983,\"enable\":0.18049999999999994,\"disable\":0.4432132963988918,\"step\":0.09024999999999997},\"maxNeuron\":203},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.9268918180942392,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.40639067297307396,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.2732820930860189,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.667740566608798,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.8046096086176506,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9588757726151992,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.078464313325832,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.7699208820953707,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":-1.1028679197091407,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.2442480900314692,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.949535394257755,\"enabled\":true,\"innovation\":1092},{\"from\":159,\"to\":100001,\"weight\":-0.3135258579702622,\"enabled\":true,\"innovation\":2752},{\"from\":35,\"to\":100005,\"weight\":0.2277128509419999,\"enabled\":true,\"innovation\":2753},{\"from\":100003,\"to\":100005,\"weight\":1.2759298925134646,\"enabled\":false,\"innovation\":2754},{\"from\":168,\"to\":100004,\"weight\":1.3118117421801978,\"enabled\":true,\"innovation\":3150},{\"from\":121,\"to\":100002,\"weight\":1.781598569079967,\"enabled\":true,\"innovation\":3151},{\"from\":100003,\"to\":206,\"weight\":1,\"enabled\":true,\"innovation\":3152},{\"from\":206,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":3153}],\"fitness\":302,\"mutationRates\":{\"connections\":0.22562499999999996,\"link\":2.4554753263096494,\"node\":0.5540166204986148,\"enable\":0.18049999999999994,\"disable\":0.4432132963988918,\"step\":0.11080332409972295},\"maxNeuron\":200},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.9994906455369321,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.3898204415183608,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.4306100076194683,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.7181026520116616,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.9037977150636464,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":1.0048179237392756,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.1895074523687117,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.795825619207052,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":1.9144268691480697,\"enabled\":false,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.3636520292209262,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.8451986579806823,\"enabled\":true,\"innovation\":1092},{\"from\":186,\"to\":100006,\"weight\":-1.4039212984366252,\"enabled\":true,\"innovation\":1298},{\"from\":64,\"to\":100000,\"weight\":-1.946946098976175,\"enabled\":true,\"innovation\":1299},{\"from\":50,\"to\":100005,\"weight\":-0.4631764756698509,\"enabled\":true,\"innovation\":1300},{\"from\":183,\"to\":100003,\"weight\":1.9980443059164212,\"enabled\":true,\"innovation\":2551},{\"from\":96,\"to\":100006,\"weight\":-0.6145764421671265,\"enabled\":true,\"innovation\":2552},{\"from\":33,\"to\":205,\"weight\":1,\"enabled\":false,\"innovation\":2553},{\"from\":205,\"to\":100002,\"weight\":1,\"enabled\":true,\"innovation\":2554},{\"from\":169,\"to\":100001,\"weight\":1.0222930213092978,\"enabled\":true,\"innovation\":3195},{\"from\":89,\"to\":100001,\"weight\":1.3055870960279856,\"enabled\":true,\"innovation\":3196},{\"from\":33,\"to\":206,\"weight\":1,\"enabled\":true,\"innovation\":3197},{\"from\":206,\"to\":205,\"weight\":1,\"enabled\":true,\"innovation\":3198}],\"fitness\":302,\"mutationRates\":{\"connections\":0.26315789473684204,\"link\":2.3327015599941667,\"node\":0.42868749999999983,\"enable\":0.17147499999999993,\"disable\":0.37999999999999984,\"step\":0.09499999999999996},\"maxNeuron\":206},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":0.794957845010348,\"enabled\":false,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.40639067297307396,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.2732820930860189,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.667740566608798,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.8046096086176506,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9588757726151992,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.078464313325832,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.7699208820953707,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":-1.1028679197091407,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.2442480900314692,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.949535394257755,\"enabled\":true,\"innovation\":1092},{\"from\":159,\"to\":100001,\"weight\":-0.3135258579702622,\"enabled\":true,\"innovation\":2752},{\"from\":35,\"to\":100005,\"weight\":0.2277128509419999,\"enabled\":true,\"innovation\":2753},{\"from\":100003,\"to\":100005,\"weight\":1.2759298925134646,\"enabled\":true,\"innovation\":2754},{\"from\":138,\"to\":100004,\"weight\":0.7157314767134766,\"enabled\":true,\"innovation\":3206},{\"from\":100000,\"to\":100002,\"weight\":1.8019148551241848,\"enabled\":true,\"innovation\":3207}],\"fitness\":302,\"mutationRates\":{\"connections\":0.24999999999999994,\"link\":2.4554753263096494,\"node\":0.49999999999999983,\"enable\":0.18049999999999994,\"disable\":0.39999999999999986,\"step\":0.11080332409972295},\"maxNeuron\":203},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.9268918180942392,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.3898204415183608,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.2732820930860189,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.667740566608798,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.9037977150636464,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9588757726151992,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.078464313325832,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.7699208820953707,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":1.9144268691480697,\"enabled\":false,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.3636520292209262,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.949535394257755,\"enabled\":true,\"innovation\":1092},{\"from\":159,\"to\":100001,\"weight\":-0.3135258579702622,\"enabled\":true,\"innovation\":2752},{\"from\":35,\"to\":100005,\"weight\":0.2277128509419999,\"enabled\":false,\"innovation\":2753},{\"from\":100003,\"to\":100005,\"weight\":1.2759298925134646,\"enabled\":true,\"innovation\":2754},{\"from\":23,\"to\":100002,\"weight\":-1.7325776484921294,\"enabled\":true,\"innovation\":2968},{\"from\":43,\"to\":100004,\"weight\":-1.0961681954791977,\"enabled\":true,\"innovation\":2969},{\"from\":126,\"to\":100005,\"weight\":-0.43478096824146917,\"enabled\":false,\"innovation\":3380},{\"from\":199,\"to\":100006,\"weight\":1.704444829193526,\"enabled\":true,\"innovation\":3381},{\"from\":185,\"to\":100006,\"weight\":1.1626686775631505,\"enabled\":true,\"innovation\":3382},{\"from\":126,\"to\":206,\"weight\":1,\"enabled\":true,\"innovation\":3383},{\"from\":206,\"to\":100005,\"weight\":1,\"enabled\":true,\"innovation\":3384}],\"fitness\":302,\"mutationRates\":{\"connections\":0.26315789473684204,\"link\":2.3327015599941667,\"node\":0.5831753899985418,\"enable\":0.18999999999999992,\"disable\":0.4210526315789472,\"step\":0.1052631578947368},\"maxNeuron\":206},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.9994906455369321,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.3898204415183608,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.4306100076194683,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.7181026520116616,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.9037977150636464,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9189108807209093,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.1139708986495025,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.795825619207052,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":1.9144268691480697,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.3636520292209262,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.8451986579806823,\"enabled\":true,\"innovation\":1092},{\"from\":186,\"to\":100006,\"weight\":-1.4039212984366252,\"enabled\":true,\"innovation\":1298},{\"from\":64,\"to\":100000,\"weight\":-1.946946098976175,\"enabled\":true,\"innovation\":1299},{\"from\":50,\"to\":100005,\"weight\":-0.4631764756698509,\"enabled\":true,\"innovation\":1300},{\"from\":3,\"to\":100006,\"weight\":-0.40291520990048646,\"enabled\":false,\"innovation\":2961},{\"from\":47,\"to\":100000,\"weight\":1.9019621927504051,\"enabled\":true,\"innovation\":2962},{\"from\":192,\"to\":100000,\"weight\":1.6825695097793325,\"enabled\":true,\"innovation\":2963},{\"from\":3,\"to\":202,\"weight\":1,\"enabled\":true,\"innovation\":2964},{\"from\":202,\"to\":100006,\"weight\":1,\"enabled\":true,\"innovation\":2965},{\"from\":71,\"to\":100002,\"weight\":1.708717784622909,\"enabled\":true,\"innovation\":3393},{\"from\":86,\"to\":100002,\"weight\":-0.18777117615636918,\"enabled\":true,\"innovation\":3394},{\"from\":129,\"to\":100006,\"weight\":0.609400725238082,\"enabled\":true,\"innovation\":3395}],\"fitness\":302,\"mutationRates\":{\"connections\":0.23749999999999996,\"link\":2.3327015599941667,\"node\":0.47499999999999987,\"enable\":0.15475618749999995,\"disable\":0.4210526315789472,\"step\":0.09499999999999996},\"maxNeuron\":203},{\"genes\":[{\"from\":66,\"to\":100002,\"weight\":1.988403008291701,\"enabled\":true,\"innovation\":117},{\"from\":20,\"to\":100003,\"weight\":-0.3898204415183608,\"enabled\":true,\"innovation\":118},{\"from\":58,\"to\":100003,\"weight\":0.4306100076194683,\"enabled\":false,\"innovation\":254},{\"from\":157,\"to\":100001,\"weight\":1.7181026520116616,\"enabled\":false,\"innovation\":255},{\"from\":58,\"to\":201,\"weight\":0.9037977150636464,\"enabled\":true,\"innovation\":256},{\"from\":201,\"to\":100003,\"weight\":0.9189108807209093,\"enabled\":true,\"innovation\":257},{\"from\":95,\"to\":100006,\"weight\":-1.1139708986495025,\"enabled\":true,\"innovation\":442},{\"from\":59,\"to\":100000,\"weight\":-1.795825619207052,\"enabled\":true,\"innovation\":443},{\"from\":33,\"to\":100002,\"weight\":1.9144268691480697,\"enabled\":true,\"innovation\":444},{\"from\":77,\"to\":100000,\"weight\":1.3636520292209262,\"enabled\":true,\"innovation\":1091},{\"from\":118,\"to\":100001,\"weight\":0.8451986579806823,\"enabled\":true,\"innovation\":1092},{\"from\":33,\"to\":100000,\"weight\":-0.04771170794911317,\"enabled\":true,\"innovation\":3400},{\"from\":182,\"to\":100000,\"weight\":0.2750141061257567,\"enabled\":true,\"innovation\":3401}],\"fitness\":302,\"mutationRates\":{\"connections\":0.23749999999999996,\"link\":2.332701559994167,\"node\":0.47499999999999987,\"enable\":0.17147499999999996,\"disable\":0.42105263157894723,\"step\":0.10526315789473681},\"maxNeuron\":201}];\n\n//# sourceURL=webpack:///./species-4.json?");

/***/ }),

/***/ "./src/battleground.js":
/*!*****************************!*\
  !*** ./src/battleground.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math */ \"./src/math.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./src/constants.js\");\n\n\n\n\n\nconst BOT_RADIUS = _constants__WEBPACK_IMPORTED_MODULE_1__[\"BOT_SIZE\"] / 2;\nconst BULLET_RADIUS = _constants__WEBPACK_IMPORTED_MODULE_1__[\"BULLET_SIZE\"] / 2;\n\nconst MIN_X_POS = 0 + BOT_RADIUS;\nconst MIN_Y_POS = 0 + BOT_RADIUS;\nconst MAX_X_POS = _constants__WEBPACK_IMPORTED_MODULE_1__[\"MAP_WIDTH\"] - BOT_RADIUS;\nconst MAX_Y_POS = _constants__WEBPACK_IMPORTED_MODULE_1__[\"MAP_HEIGHT\"] - BOT_RADIUS;\n\nconst NO_ACTION_TIMEOUT = 5;\nconst BATTLE_TIMEOUT = 100;\n\nclass Battleground {\n    constructor() {\n        this.bots = [];\n        this.botActions = [];\n        this.bullets = [];\n        this.onEnd = null;\n        this.winner = null;\n        this.lastActionTime = null;\n        this.lastBotMoveOrShootTime = null;\n        this.lastShootTime = [Date.now(), Date.now()];\n    }\n\n    addBots(bot1, bot2) {\n        this.bots.push(bot1)\n        this.bots.push(bot2)\n    }\n\n    start(onEnd) {\n        console.log(\"Starting battleground\");\n        this.onEnd = onEnd;\n        this.startTime = Date.now();\n        this.lastUpdate = Date.now();\n        this.lastActionTime = Date.now();\n        this.lastBotMoveOrShootTime = Date.now();\n        this.updateBots();\n        this.updateBotsInterval = setInterval(this.updateBots.bind(this), _constants__WEBPACK_IMPORTED_MODULE_1__[\"TICK_TIME\"]);\n        this.updateInterval = setInterval(this.update.bind(this), 10);\n        this.drawInterval = setInterval(this.draw.bind(this), 10);\n    }\n\n    end() {\n        if (!this.onEnd) return;\n\n        clearInterval(this.updateBotsInterval);\n        clearInterval(this.updateInterval);\n        clearInterval(this.drawInterval);\n\n        this.endTime = Date.now();\n        const totalTime = (this.endTime - this.startTime) / 1000;\n        const results = {\n            startTime: this.startTime,\n            endTime: this.endTime,\n            totalTime,\n            winner: this.winner\n        };\n        this.onEnd(results);\n        this.onEnd = null;\n    }\n\n    updateBot(bot, otherBot) {\n        const gameState = {\n            xPos: bot.xPos,\n            yPos: bot.yPos,\n            rotation: bot.rotation,\n            bullets: bot.bullets,\n            otherPlayer: {\n                xPos: otherBot.xPos,\n                yPos: otherBot.yPos,\n                rotation: otherBot.rotation,\n                bullets: otherBot.bullets\n            }\n        }\n        const botActions = bot.update(gameState);\n        return botActions;\n    }\n\n    updateBots() {\n        this.botActions[0] = this.updateBot(this.bots[0], this.bots[1]);\n        this.botActions[1] = this.updateBot(this.bots[1], this.bots[0]);\n        if (this.botDidActions(this.botActions[0])) {\n            this.lastActionTime = Date.now()\n        }\n        if ((Date.now() - this.lastActionTime) / 1000 > NO_ACTION_TIMEOUT) {\n            this.end();\n        }\n        if ((Date.now() - this.lastBotMoveOrShootTime) / 1000 > NO_ACTION_TIMEOUT) {\n            this.end();\n        }\n        if ((Date.now() - this.startTime) / 1000 > BATTLE_TIMEOUT) {\n            this.end();\n        }\n    }\n\n    botDidActions(botActions) {\n        return botActions.dx != 0 || botActions.dy != 0 || botActions.dh != 0 || botActions.ds != 0;\n    }\n\n    botMoved(bot, newXPos, newYPos) {\n        return bot.xPos != newXPos || bot.yPos != newYPos;\n    }\n\n    update() {\n        const delta = (Date.now() - this.lastUpdate) / 1000;\n        const moveSpeedMultiplier = 1000 / _constants__WEBPACK_IMPORTED_MODULE_1__[\"TICK_TIME\"]; // Bots actually move at maxSpeed every 75ms not every 1000ms.\n\n        this.lastUpdate = Date.now();\n\n        for (var i = 0; i < this.bots.length; i++) {\n            const bot = this.bots[i];\n            const botActions = this.botActions[i];\n            const otherBot = i == 0 ? this.bots[1] : this.bots[0];\n\n            const xMovement = Math.max(Math.min(botActions.dx, _constants__WEBPACK_IMPORTED_MODULE_1__[\"MAX_SPEED\"]), -_constants__WEBPACK_IMPORTED_MODULE_1__[\"MAX_SPEED\"]) * delta * moveSpeedMultiplier;\n            const yMovement = Math.max(Math.min(botActions.dy, _constants__WEBPACK_IMPORTED_MODULE_1__[\"MAX_SPEED\"]), -_constants__WEBPACK_IMPORTED_MODULE_1__[\"MAX_SPEED\"]) * delta * moveSpeedMultiplier;\n            const rotation = Math.max(Math.min(botActions.dh, _constants__WEBPACK_IMPORTED_MODULE_1__[\"MAX_SPEED\"]), -_constants__WEBPACK_IMPORTED_MODULE_1__[\"MAX_SPEED\"]) * delta * moveSpeedMultiplier;\n\n            const newXPos = Math.min(Math.max(bot.xPos + xMovement, MIN_X_POS), MAX_X_POS);\n            const newYPos = Math.min(Math.max(bot.yPos + yMovement, MIN_Y_POS), MAX_Y_POS);\n\n            if (bot.id === 1 && (this.botMoved(bot, newXPos, newYPos) || botActions.ds)) {\n                this.lastBotMoveOrShootTime = Date.now();\n            }\n\n            bot.xPos = newXPos;\n            bot.yPos = newYPos;\n            bot.rotation += rotation;\n            if (bot.rotation > 360)  {\n                bot.rotation -= 360;\n            }\n            if (bot.rotation < 0) {\n                bot.rotation += 360;\n            }\n\n            bot.bullets.forEach((bullet) => {\n                const xDistance = _constants__WEBPACK_IMPORTED_MODULE_1__[\"BULLET_SPEED\"] * Math.cos(bullet.rotation * Math.PI / 180) * delta * moveSpeedMultiplier;\n                const yDistance = _constants__WEBPACK_IMPORTED_MODULE_1__[\"BULLET_SPEED\"] * Math.sin(bullet.rotation * Math.PI / 180) * delta * moveSpeedMultiplier;\n                bullet.xPos += xDistance;\n                bullet.yPos += yDistance;\n                if (bullet.xPos > MAX_X_POS || bullet.xPos < 0) {\n                    bullet.dead = true\n                }\n                if (bullet.yPos > MAX_Y_POS || bullet.yPos < 0) {\n                    bullet.dead = true\n                }\n\n                if (Object(_math__WEBPACK_IMPORTED_MODULE_0__[\"distanceBetweenPoints\"])(bullet.xPos, bullet.yPos, otherBot.xPos, otherBot.yPos) < (BULLET_RADIUS + BOT_RADIUS)) {\n                    otherBot.lives -= 1;\n                    // console.log(\"Bot \" + otherBot.id + \" hit! Now has \" + otherBot.lives + \" lives left.\");\n                    if (otherBot.lives <= 0) {\n                        this.winner = bot.id;\n                        return this.end();\n                    }\n                    bullet.dead = true;\n                }\n            });\n\n            bot.bullets = bot.bullets.filter(function (bullet) { return !bullet.dead; });\n            // console.log(\"Bot bullets: \", bot.bullets);\n\n            if (botActions.ds && bot.bullets.length < 5 && (Date.now() - this.lastShootTime[i]) >= _constants__WEBPACK_IMPORTED_MODULE_1__[\"TICK_TIME\"]) {\n                this.lastShootTime[i] = Date.now();\n                let bullet = this.spawnBullet(bot.xPos, bot.yPos, bot.rotation);\n                // console.log(\"Spawning bullet: \", bullet);\n                botActions.ds = false;\n                bot.bullets.push(bullet);\n            }\n        }\n    }\n\n    draw() {\n        var canvas = document.getElementById('battleground');\n        if (canvas.getContext) {\n            var ctx = canvas.getContext('2d');\n            let fillStyle = \"#ddffdd\";\n            ctx.fillStyle = fillStyle;\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n            this.bots.forEach(function (bot) {\n                const botColor = bot.id == 1 ? \"#ffdddd\" : \"#ddddff\";\n                ctx.fillStyle = botColor;\n                ctx.beginPath();\n                ctx.arc(bot.xPos, bot.yPos, BOT_RADIUS, 0, 2 * Math.PI, false);\n                ctx.fill();\n\n                ctx.strokeStyle = \"#000000\";\n                ctx.lineWidth = 1;\n                ctx.stroke();\n\n                ctx.beginPath();\n                ctx.lineWidth = 3;\n                ctx.moveTo(bot.xPos, bot.yPos);\n                ctx.lineTo(\n                    bot.xPos + (BOT_RADIUS * Math.cos(bot.rotation * Math.PI / 180)),\n                    bot.yPos + (BOT_RADIUS * Math.sin(bot.rotation * Math.PI / 180)),\n                )\n                ctx.stroke();\n                ctx.resetTransform();\n\n                ctx.fillStyle = \"#000000\";\n                if (bot.bullets.length) {\n                    bot.bullets.forEach(function (bullet) {\n                        ctx.beginPath();\n                        ctx.arc(bullet.xPos, bullet.yPos, BULLET_RADIUS, 0, 2 * Math.PI, false);\n                        ctx.fill();\n                    })\n                }\n            });\n        }\n    }\n\n    spawnBullet(xPos, yPos, rotation) {\n        return {\n            xPos,\n            yPos,\n            rotation\n        };\n    }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Battleground);\n\n//# sourceURL=webpack:///./src/battleground.js?");

/***/ }),

/***/ "./src/bot.js":
/*!********************!*\
  !*** ./src/bot.js ***!
  \********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math */ \"./src/math.js\");\n/* harmony import */ var _genome__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./genome */ \"./src/genome.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ \"./src/constants.js\");\n\n\n\n\n\n/* Codespace = {\n    dx, dy, dh, ds, xPos, yPos, rotation, bullets, otherPlayer\n} */\n\nclass Bot {\n    constructor(id) {\n        this.id = id;\n        this.xPos = _constants__WEBPACK_IMPORTED_MODULE_2__[\"PLAYER1_START_X\"];\n        this.yPos = _constants__WEBPACK_IMPORTED_MODULE_2__[\"PLAYER1_START_Y\"];\n        this.rotation = 0;\n        this.bullets = [];\n        this.lives = _constants__WEBPACK_IMPORTED_MODULE_2__[\"STARTING_LIVES\"];\n        this.genome = new _genome__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        this.outputMethod = null;\n\n        if (this.id > 1) {\n            this.xPos = _constants__WEBPACK_IMPORTED_MODULE_2__[\"PLAYER2_START_X\"];\n            this.yPos = _constants__WEBPACK_IMPORTED_MODULE_2__[\"PLAYER2_START_Y\"];\n            this.rotation = _constants__WEBPACK_IMPORTED_MODULE_2__[\"PLAYER2_START_ROTATION\"];\n        }\n\n    }\n\n    loadGenome(genome) {\n        this.genome = genome;\n    }\n    \n    selectAIMethod() {\n        const randomMethod = Math.floor(Math.random() * 5); // 5th method is to use the gnome assigned like player1\n        console.log(\"AI Method chosen: \" + randomMethod);\n\n        switch (randomMethod) {\n            case 0: return this.aiMethod = this.createRandomOutputObject.bind(this)\n            case 1: return this.aiMethod = this.createStandAndShootOutputObject.bind(this);\n            case 2: return this.aiMethod = this.createMoveVerticalAndShootOutputObject.bind(this);\n            case 3: return this.aiMethod = this.createSpinAndShootOutputObject.bind(this);\n        }\n    }\n\n    createOutputObject() {\n        if (this.id == 2 && this.aiMethod) {\n            return this.aiMethod();\n        }\n        // There should be a total of 16 output nodes, 5 bits for each movement / rotation and another bit on if it should shoot or not\n        const neurons = this.genome.neurons;\n        const outputNeurons = neurons.slice(_constants__WEBPACK_IMPORTED_MODULE_2__[\"MAX_NEURONS\"], neurons.length);\n        const outputValues = outputNeurons.map((neuron) => {\n            return neuron.value > 0 ? 1 : 0;\n        });\n\n        // First bit is if it's negative, other 4 bits are 0 -> 15\n        // let dx = outputValues[0] == 0 ? -1 : 1; \n        // dx *= (outputValues[1] * 1 + outputValues[2] * 2 + outputValues[3] * 4 + outputValues[4] * 8);\n        // let dy = outputValues[5] == 0 ? -1 : 1;\n        // dy *= (outputValues[6] * 1 + outputValues[7] * 2 + outputValues[8] * 4 + outputValues[9] * 8);\n        // let dh = outputValues[10] == 0 ? -1 : 1;\n        // dh *=  (outputValues[11] * 1 + outputValues[12] * 2 + outputValues[13] * 4 + outputValues[14] * 8);\n\n        let dx = outputValues[0] * -_constants__WEBPACK_IMPORTED_MODULE_2__[\"MAX_SPEED\"] + outputValues[1] * _constants__WEBPACK_IMPORTED_MODULE_2__[\"MAX_SPEED\"];\n        let dy = outputValues[2] * -_constants__WEBPACK_IMPORTED_MODULE_2__[\"MAX_SPEED\"] + outputValues[3] * _constants__WEBPACK_IMPORTED_MODULE_2__[\"MAX_SPEED\"];\n\n        // Translate what the bot thinks it wants to do into real world space (as the bots vision is based on its direction)\n        const translatedDx = Math.cos(Object(_math__WEBPACK_IMPORTED_MODULE_0__[\"degreesToRadians\"])(this.rotation)) * dx - Math.sin(Object(_math__WEBPACK_IMPORTED_MODULE_0__[\"degreesToRadians\"])(this.rotation)) * dy;\n        const translatedDy = Math.sin(Object(_math__WEBPACK_IMPORTED_MODULE_0__[\"degreesToRadians\"])(this.rotation)) * dx + Math.cos(Object(_math__WEBPACK_IMPORTED_MODULE_0__[\"degreesToRadians\"])(this.rotation)) * dy;\n\n        let dh = outputValues[4] * -_constants__WEBPACK_IMPORTED_MODULE_2__[\"MAX_SPEED\"] + outputValues[5] * _constants__WEBPACK_IMPORTED_MODULE_2__[\"MAX_SPEED\"]\n\n        return {\n            dx: translatedDx, \n            dy: translatedDy, \n            dh, \n            ds: outputValues[6] \n        }\n    }\n\n    createRandomOutputObject() {\n        return {\n            dx: Math.floor(Math.random() * 30) - 15,\n            dy: Math.floor(Math.random() * 30) - 15,\n            dh: Math.floor(Math.random() * 30) - 15,\n            ds: Math.random() < 0.1\n        }\n    }\n\n    createStandAndShootOutputObject() {\n        return {\n            dx: 0,\n            dy: 0,\n            dh: 0,\n            ds: Math.random() < 0.1\n        }\n    }\n\n    createMoveVerticalAndShootOutputObject() {\n        return {\n            dx: 0,\n            dy: 15 * Math.floor(Math.random() * 2) - 1,\n            dh: 0,\n            ds: Math.random() < 0.05\n        }\n    }\n\n    createSpinAndShootOutputObject() {\n        return {\n            ds: true,\n            dh: 5,\n            dy: this.otherPlayer.yPos - this.yPos,\n            dx: this.otherPlayer.xPos - this.xPos,\n        }\n    }\n\n\n    updateNetwork(inputs) {\n        this.updateBotPosition(inputs.xPos, inputs.yPos, inputs.rotation)\n        this.otherPlayer = inputs.otherPlayer;\n        const translatedPositions = this.translateObjectPositions(inputs.otherPlayer)\n        this.setInputNeurons(translatedPositions);\n        this.drawBrainView(translatedPositions);\n    }\n\n    updateBotPosition(xPos, yPos, rotation) {\n        this.xPos = xPos\n        this.yPos = yPos\n        this.rotation = rotation\n    }\n\n    translateObjectPositions(otherPlayer) {\n        const playerXPos = this.xPos;\n        const playerYPos = this.yPos;\n        const rotationAngle =  Object(_math__WEBPACK_IMPORTED_MODULE_0__[\"degreesToRadians\"])(-this.rotation);\n        const centerPointX = _constants__WEBPACK_IMPORTED_MODULE_2__[\"MAP_WIDTH\"] / 2;\n        const centerPointY = _constants__WEBPACK_IMPORTED_MODULE_2__[\"MAP_HEIGHT\"] / 2;\n        const translationMatrix = [_constants__WEBPACK_IMPORTED_MODULE_2__[\"MAP_WIDTH\"] - this.xPos, _constants__WEBPACK_IMPORTED_MODULE_2__[\"MAP_HEIGHT\"] - this.yPos];\n\n        const otherPlayerRotated = Object(_math__WEBPACK_IMPORTED_MODULE_0__[\"rotateAroundPoint\"])(this.xPos, this.yPos, rotationAngle, [otherPlayer.xPos, otherPlayer.yPos]);\n        const otherPlayerTranslated = Object(_math__WEBPACK_IMPORTED_MODULE_0__[\"translateMatrix\"])(translationMatrix, otherPlayerRotated);\n        const walls = [];\n        for (var i = _constants__WEBPACK_IMPORTED_MODULE_2__[\"NN_SQUARE_SIZE\"] / 2; i < _constants__WEBPACK_IMPORTED_MODULE_2__[\"MAP_WIDTH\"]; i += _constants__WEBPACK_IMPORTED_MODULE_2__[\"NN_SQUARE_SIZE\"]) {\n            walls.push({xPos: i, yPos: -_constants__WEBPACK_IMPORTED_MODULE_2__[\"NN_SQUARE_SIZE\"] / 2});\n            walls.push({xPos: i, yPos: _constants__WEBPACK_IMPORTED_MODULE_2__[\"MAP_HEIGHT\"] + (_constants__WEBPACK_IMPORTED_MODULE_2__[\"NN_SQUARE_SIZE\"] / 2)});\n        }\n        for (var i = _constants__WEBPACK_IMPORTED_MODULE_2__[\"NN_SQUARE_SIZE\"] / 2; i < _constants__WEBPACK_IMPORTED_MODULE_2__[\"MAP_HEIGHT\"]; i += _constants__WEBPACK_IMPORTED_MODULE_2__[\"NN_SQUARE_SIZE\"]) {\n            walls.push({xPos: -_constants__WEBPACK_IMPORTED_MODULE_2__[\"NN_SQUARE_SIZE\"] / 2, yPos: i});\n            walls.push({xPos: _constants__WEBPACK_IMPORTED_MODULE_2__[\"MAP_WIDTH\"] + (_constants__WEBPACK_IMPORTED_MODULE_2__[\"NN_SQUARE_SIZE\"] / 2), yPos: i});\n        }\n         \n\n        return {\n            xPos: otherPlayerTranslated[0],\n            yPos: otherPlayerTranslated[1],\n            bullets: otherPlayer.bullets.map((bullet) => {\n                const bulletRotated = Object(_math__WEBPACK_IMPORTED_MODULE_0__[\"rotateAroundPoint\"])(playerXPos, playerYPos, rotationAngle, [bullet.xPos, bullet.yPos]);\n                const bulletTranslated = Object(_math__WEBPACK_IMPORTED_MODULE_0__[\"translateMatrix\"])(translationMatrix, bulletRotated);\n                return {\n                    xPos: bulletTranslated[0],\n                    yPos: bulletTranslated[1]\n                }\n            }),\n            walls: walls.map((wall) => {\n                const wallRotated = Object(_math__WEBPACK_IMPORTED_MODULE_0__[\"rotateAroundPoint\"])(playerXPos, playerYPos, rotationAngle, [wall.xPos, wall.yPos]);\n                const wallTranslated = Object(_math__WEBPACK_IMPORTED_MODULE_0__[\"translateMatrix\"])(translationMatrix, wallRotated);\n                return {\n                    xPos: wallTranslated[0],\n                    yPos: wallTranslated[1]\n                }\n            })\n        }\n    }\n\n    setInputNeurons(translatedPositions) {\n        const neurons = this.genome.neurons;\n        for (let i = 0; i < _constants__WEBPACK_IMPORTED_MODULE_2__[\"INPUT_NEURONS\"]; i++) {\n            neurons[i].value = 0;\n            let currentSquare = {\n                minX: Math.floor(i % _constants__WEBPACK_IMPORTED_MODULE_2__[\"INPUT_WIDTH\"]) * _constants__WEBPACK_IMPORTED_MODULE_2__[\"NN_SQUARE_SIZE\"],\n                maxX: (Math.floor(i % _constants__WEBPACK_IMPORTED_MODULE_2__[\"INPUT_WIDTH\"]) + 1) * _constants__WEBPACK_IMPORTED_MODULE_2__[\"NN_SQUARE_SIZE\"],\n                minY: Math.floor(i / _constants__WEBPACK_IMPORTED_MODULE_2__[\"INPUT_WIDTH\"]) * _constants__WEBPACK_IMPORTED_MODULE_2__[\"NN_SQUARE_SIZE\"],\n                maxY: (Math.floor(i / _constants__WEBPACK_IMPORTED_MODULE_2__[\"INPUT_WIDTH\"]) + 1) * _constants__WEBPACK_IMPORTED_MODULE_2__[\"NN_SQUARE_SIZE\"],\n            }\n            if (translatedPositions.xPos > currentSquare.minX && translatedPositions.xPos < currentSquare.maxX\n                && translatedPositions.yPos > currentSquare.minY && translatedPositions.yPos < currentSquare.maxY) {\n                neurons[i].value = 1;\n            }\n            translatedPositions.bullets.forEach((bullet) => {\n                if (bullet.xPos > currentSquare.minX && bullet.xPos < currentSquare.maxX\n                    && bullet.yPos > currentSquare.minY && bullet.yPos < currentSquare.maxY) {\n                    neurons[i].value = -1;\n                }\n            });\n            translatedPositions.walls.forEach((wall) => {\n                if (wall.xPos > currentSquare.minX && wall.xPos < currentSquare.maxX\n                    && wall.yPos > currentSquare.minY && wall.yPos < currentSquare.maxY) {\n                    neurons[i].value = -1;\n                }\n            });\n        }\n    }\n\n\n    /* This gets the current inputs, and makes their input flow down the network\n    to get to the outputs and figure out what output to press */\n    calculateWeights() {\n        this.genome.calculateWeights();\n    }\n\n    drawBrainView(translatedPositions) {\n        var canvas = document.getElementById('bot' + this.id + 'brain');\n        if (canvas.getContext) {\n            var ctx = canvas.getContext('2d');\n            const playerBGColor = this.id == 1 ? \"#ffdddd\" : \"#ddddff\";\n            const playerColor = this.id == 1 ? \"#ff0000\" : \"#0000ff\";\n            const enemyColor = this.id == 1 ? \"#0000ff\" : \"#ff0000\";\n            ctx.fillStyle = playerBGColor;\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n            // Draw player, always in center. \n            ctx.fillStyle = playerColor;\n            const scaledXPos = this.scaleForBrain(_constants__WEBPACK_IMPORTED_MODULE_2__[\"MAP_WIDTH\"]);\n            const scaledYPos = this.scaleForBrain(_constants__WEBPACK_IMPORTED_MODULE_2__[\"MAP_HEIGHT\"]);\n            ctx.fillRect(scaledXPos, scaledYPos, _constants__WEBPACK_IMPORTED_MODULE_2__[\"BRAIN_CANVAS_SCALE\"], _constants__WEBPACK_IMPORTED_MODULE_2__[\"BRAIN_CANVAS_SCALE\"]);\n\n            //Draw other player and objects, translated to how this brain sees them. \n            ctx.fillStyle = enemyColor;\n            const opponentXPos = this.scaleForBrain(translatedPositions.xPos);\n            const opponentYPos = this.scaleForBrain(translatedPositions.yPos);\n            ctx.fillRect(opponentXPos, opponentYPos, _constants__WEBPACK_IMPORTED_MODULE_2__[\"BRAIN_CANVAS_SCALE\"], _constants__WEBPACK_IMPORTED_MODULE_2__[\"BRAIN_CANVAS_SCALE\"]);\n\n            ctx.fillStyle = \"#000000\";\n            translatedPositions.bullets.forEach((bullet) => {\n                const bulletXPos = this.scaleForBrain(bullet.xPos);\n                const bulletYPos = this.scaleForBrain(bullet.yPos);\n                ctx.fillRect(bulletXPos, bulletYPos, _constants__WEBPACK_IMPORTED_MODULE_2__[\"BRAIN_CANVAS_SCALE\"], _constants__WEBPACK_IMPORTED_MODULE_2__[\"BRAIN_CANVAS_SCALE\"]);\n            });\n\n            translatedPositions.walls.forEach((wall) => {\n                const wallXPos = this.scaleForBrain(wall.xPos);\n                const wallYPos = this.scaleForBrain(wall.yPos);\n                ctx.fillRect(wallXPos, wallYPos, _constants__WEBPACK_IMPORTED_MODULE_2__[\"BRAIN_CANVAS_SCALE\"], _constants__WEBPACK_IMPORTED_MODULE_2__[\"BRAIN_CANVAS_SCALE\"]);\n            });\n\n\n        }\n    }\n\n    // Scales a value to display correctly on the brain graph\n    scaleForBrain(value) {\n        // We find the square of the neural network (each are NN_SQUARE_SIZE in width and height)\n        // Place the object in the one it's inside, and then scale based on the size of this brain canvas. \n        return Math.floor(value / _constants__WEBPACK_IMPORTED_MODULE_2__[\"NN_SQUARE_SIZE\"]) * _constants__WEBPACK_IMPORTED_MODULE_2__[\"BRAIN_CANVAS_SCALE\"];\n    }\n\n    update(inputs) {\n        this.updateNetwork(inputs);\n        this.calculateWeights();\n        return this.createOutputObject()\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Bot);\n\n\n//# sourceURL=webpack:///./src/bot.js?");

/***/ }),

/***/ "./src/constants.js":
/*!**************************!*\
  !*** ./src/constants.js ***!
  \**************************/
/*! exports provided: MAX_NEURONS, MAP_WIDTH, MAP_HEIGHT, BRAIN_WIDTH, BRAIN_HEIGHT, BRAIN_CANVAS_WIDTH, NN_SQUARE_SIZE, BRAIN_CANVAS_SCALE, INPUT_WIDTH, INPUT_HEIGHT, INPUT_NEURONS, OUTPUT_NEURONS, STARTING_LIVES, TICK_TIME, BOT_SIZE, MAX_SPEED, BULLET_SIZE, BULLET_SPEED, PLAYER1_START_X, PLAYER1_START_Y, PLAYER1_START_ROTATION, PLAYER2_START_X, PLAYER2_START_Y, PLAYER2_START_ROTATION, DELTA_DISJOINT, DELTA_WEIGHTS, DELTA_THRESHOLD */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAX_NEURONS\", function() { return MAX_NEURONS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAP_WIDTH\", function() { return MAP_WIDTH; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAP_HEIGHT\", function() { return MAP_HEIGHT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BRAIN_WIDTH\", function() { return BRAIN_WIDTH; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BRAIN_HEIGHT\", function() { return BRAIN_HEIGHT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BRAIN_CANVAS_WIDTH\", function() { return BRAIN_CANVAS_WIDTH; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NN_SQUARE_SIZE\", function() { return NN_SQUARE_SIZE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BRAIN_CANVAS_SCALE\", function() { return BRAIN_CANVAS_SCALE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"INPUT_WIDTH\", function() { return INPUT_WIDTH; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"INPUT_HEIGHT\", function() { return INPUT_HEIGHT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"INPUT_NEURONS\", function() { return INPUT_NEURONS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OUTPUT_NEURONS\", function() { return OUTPUT_NEURONS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"STARTING_LIVES\", function() { return STARTING_LIVES; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TICK_TIME\", function() { return TICK_TIME; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BOT_SIZE\", function() { return BOT_SIZE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAX_SPEED\", function() { return MAX_SPEED; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BULLET_SIZE\", function() { return BULLET_SIZE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BULLET_SPEED\", function() { return BULLET_SPEED; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PLAYER1_START_X\", function() { return PLAYER1_START_X; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PLAYER1_START_Y\", function() { return PLAYER1_START_Y; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PLAYER1_START_ROTATION\", function() { return PLAYER1_START_ROTATION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PLAYER2_START_X\", function() { return PLAYER2_START_X; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PLAYER2_START_Y\", function() { return PLAYER2_START_Y; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PLAYER2_START_ROTATION\", function() { return PLAYER2_START_ROTATION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DELTA_DISJOINT\", function() { return DELTA_DISJOINT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DELTA_WEIGHTS\", function() { return DELTA_WEIGHTS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DELTA_THRESHOLD\", function() { return DELTA_THRESHOLD; });\nconst MAX_NEURONS = 10e4;\nconst MAP_WIDTH = 1000; \nconst MAP_HEIGHT = 500; \n\n// The brain is 2x the size of the map because the player is centered in the brain \n// so if player is in top left and other in bottom right it needs enough room to show them\nconst BRAIN_WIDTH = MAP_WIDTH * 2; \nconst BRAIN_HEIGHT = MAP_HEIGHT * 2;\n\nconst BRAIN_CANVAS_WIDTH = 400;\n\nconst NN_SQUARE_SIZE = 50;\nconst BRAIN_CANVAS_SCALE = (BRAIN_CANVAS_WIDTH / (BRAIN_WIDTH / NN_SQUARE_SIZE)); \n\nconst INPUT_WIDTH = BRAIN_WIDTH / NN_SQUARE_SIZE;\nconst INPUT_HEIGHT = BRAIN_HEIGHT / NN_SQUARE_SIZE;\nconst INPUT_NEURONS = INPUT_WIDTH * INPUT_HEIGHT;\n\nconst OUTPUT_NEURONS = 7;\n\nconst STARTING_LIVES = 5;\n\nconst TICK_TIME = 75;\n\nconst BOT_SIZE = 36;\nconst MAX_SPEED = 15;\n// export const MOVE_SPEED_MULTIPLIER = 2;\n\nconst BULLET_SIZE = 20;\nconst BULLET_SPEED = 20;\n\nconst PLAYER1_START_X = 36;\nconst PLAYER1_START_Y = 350;\nconst PLAYER1_START_ROTATION = 0;\n\nconst PLAYER2_START_X = 964;\nconst PLAYER2_START_Y = 350;\nconst PLAYER2_START_ROTATION = 180;\n\nconst DELTA_DISJOINT = 2;\nconst DELTA_WEIGHTS = 0.4;\nconst DELTA_THRESHOLD = 1;\n\n\n//# sourceURL=webpack:///./src/constants.js?");

/***/ }),

/***/ "./src/genome.js":
/*!***********************!*\
  !*** ./src/genome.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Genome; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./src/constants.js\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./math */ \"./src/math.js\");\n/* harmony import */ var _innovation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./innovation */ \"./src/innovation.js\");\n\n\n\n\n\n\n\nconst INITIAL_MUTATION_RATE = 1;\n\nconst PARENT2_INNOVATION_GENE_CHANCE = 0.5;\nconst MUTATION_TYPES = ['connections', 'link', 'node', 'enable', 'disable'];\n\nconst MUTATE_CONNECTION_CHANCE = 0.25;\nconst PERTUBE_CHANCE = 0.9;\nconst MUTATE_LINK_CHANCE = 2;\nconst MUTATE_NODE_CHANCE = 0.5;\nconst MUTATE_BIAS_CHANCE = 0.4;\nconst MUTATE_DISABLE_CHANCE = 0.4;\nconst MUTATE_ENABLE_CHANCE = 0.2;\nconst STEP_SIZE = 0.1;\n\nclass Gene {\n    constructor() {\n        this.from = null;\n        this.to = null;\n        this.weight = 0;\n        this.enabled = true;\n        this.innovation = 0;\n    }\n\n    clone() {\n        const gene = new Gene();\n        gene.from = this.from; \n        gene.to = this.to;\n        gene.weight = this.weight;\n        gene.enabled = this.enabled;\n        gene.innovation = this.innovation;\n        return gene;\n    }\n}\n\nclass Neuron {\n    constructor(id) {\n        this.id = id;\n        this.incoming = [];\n        this.value = 0;\n    }\n}\n\nclass Genome {\n    constructor() {\n        this.genes = [];\n        this.neurons = [];\n        this.mutationRates = {\n            connections: MUTATE_CONNECTION_CHANCE,\n            link: MUTATE_LINK_CHANCE,\n            node: MUTATE_NODE_CHANCE,\n            enable: MUTATE_ENABLE_CHANCE,\n            disable: MUTATE_DISABLE_CHANCE,\n            step: STEP_SIZE\n        };\n        this.fitness = 0;\n        this.globalRank = 0;\n        this.initializeNeurons();\n        this.maxNeuron = _constants__WEBPACK_IMPORTED_MODULE_0__[\"INPUT_NEURONS\"];\n        this.totalRounds = 0;\n    }\n\n    load(genome) {\n        this.genes = [];\n        this.mutationRates = genome.getMutationRates()\n\n        genome.genes.forEach((gene) => {\n            this.genes.push(gene.clone());\n        });\n        this.initializeNeurons();\n        this.maxNeuron = genome.maxNeuron;\n    }\n\n    static loadFromJSON(data) {\n        const genome = new Genome();\n        genome.mutationRates = Object.assign({}, data.mutationRates);\n        genome.maxNeuron = data.maxNeuron;\n\n        data.genes.forEach((geneData) => {\n            const gene = new Gene();\n            gene.from = geneData.from;\n            gene.to = geneData.to;\n            gene.weight = geneData.weight;\n            gene.enabled = geneData.enabled;\n            gene.innovation = geneData.innovation;\n            genome.genes.push(gene);\n        });\n\n        genome.initializeNeurons();\n        return genome;\n    }\n\n    clone() {\n        const clonedGenome = new Genome();\n        this.genes.forEach(function (gene) {\n            clonedGenome.genes.push(gene.clone());\n        });\n\n        clonedGenome.mutationRates = this.getMutationRates();\n\n        return clonedGenome;\n    }\n\n    addFitness(fitness) {\n        this.fitness += fitness;\n    }\n\n    getMutationRates() {\n        return Object.assign({}, this.mutationRates);\n    }\n\n    newInnovation() {\n        return 0;\n    }\n\n    initializeNeurons() {\n        this.neurons = [];\n\n        for (let i = 0; i < _constants__WEBPACK_IMPORTED_MODULE_0__[\"INPUT_NEURONS\"]; i++) {\n            this.neurons.push(this.createNeuron(i))\n        }\n\n        for (let i = 0; i < _constants__WEBPACK_IMPORTED_MODULE_0__[\"OUTPUT_NEURONS\"]; i++) {\n            let id = _constants__WEBPACK_IMPORTED_MODULE_0__[\"MAX_NEURONS\"] + i;\n            this.neurons[id] = this.createNeuron(id);\n        }\n\n        this.genes.forEach((gene) => {\n            if (!gene.enabled) return;\n\n            if (this.neurons[gene.to] == null) {\n                this.neurons[gene.to] = new Neuron(gene.to);\n            }\n            this.neurons[gene.to].incoming.push(gene);\n\n            if (this.neurons[gene.from] == null) {\n                this.neurons[gene.from] = new Neuron(gene.from);\n            }\n        });\n    }\n\n    createNeuron(id) {\n        const neuron = new Neuron(id);\n        return neuron;\n    }\n\n    /* Child gets most of its genes from parent1 which is the fittest \n    of the two parents */\n    inheritFromParents(parent1, parent2) {\n        const parent2Innovations = {};\n        for (let i = 0; i < parent2.genes.length; i++) {\n            let gene = parent2.genes[i];\n            parent2Innovations[gene.innovation] = gene;\n        }\n\n        for (let i = 0; i < parent1.genes.length; i++) {\n            let geneParent = parent1;\n            let gene1 = parent1.genes[i];\n            let gene2 = parent2Innovations[gene1.innovation];\n            if (gene2 != null && Math.random() < PARENT2_INNOVATION_GENE_CHANCE && gene2.enabled) {\n                this.genes.push(gene2.clone());\n            } else {\n                this.genes.push(gene1.clone())\n            }\n        }\n        \n        this.maxNeuron = Math.max(parent1.maxNeuron, parent2.maxNeuron);\n        this.mutationRates = parent1.getMutationRates();\n    }\n\n    /* Chance of applying a random mutation to the child based on\n    its mutation rate */\n    mutate() {\n        Object.keys(this.mutationRates).forEach((mutationType) => {\n            const currentRate = this.mutationRates[mutationType];\n            if (Math.random() < 0.5) {\n                this.mutationRates[mutationType] = currentRate * 0.95;\n            } else {\n                this.mutationRates[mutationType] = currentRate * (1 / 0.95);\n            }\n        });\n\n        if (Math.random() < this.mutationRates['connections']) {\n            this.pointMutate();\n        }\n\n        let linkMutations = this.mutationRates['link'];\n        while (linkMutations > 0) {\n            if (Math.random() < linkMutations) {\n                this.linkMutate();\n            }\n            linkMutations -= 1;\n        }\n\n        let nodeMutations = this.mutationRates['node'];\n        while (nodeMutations > 0) {\n            if (Math.random() < nodeMutations) {\n                this.nodeMutate();\n            }\n            nodeMutations -= 1;\n        }\n\n        let enableMutations = this.mutationRates['enable'];\n        while (enableMutations > 0) {\n            if (Math.random() < enableMutations) {\n                this.enableMutate();\n            }\n            enableMutations -= 1;\n        }\n\n        let disableMutations = this.mutationRates['disable'];\n        while (disableMutations > 0) {\n            if (Math.random() < disableMutations) {\n                this.disableMutate();\n            }\n            disableMutations -= 1;\n        }\n    }\n\n    getRandomNeuron(nonInput) {\n        let startingId = nonInput ? _constants__WEBPACK_IMPORTED_MODULE_0__[\"INPUT_NEURONS\"] : 0\n        const pickableNeurons = this.neurons.map((neuron) => {\n            if (neuron.id >= startingId) return neuron;\n            return null;\n        }).filter((n) => { return n != null });\n        const neuronId = pickableNeurons[Math.floor(Math.random() * pickableNeurons.length)].id;\n        return this.neurons[neuronId];\n    }\n\n    getRandomGene() {\n        return this.genes[Math.floor(Math.random() * this.genes.length)];\n    }\n\n    hasSameGene(gene) {\n        const hasGene = this.genes.some(function(g) {\n            if (g.from === gene.from && g.to === gene.to) {\n                return true\n            }\n            return false;\n        });\n        return hasGene;\n    }\n\n    pointMutate() {\n        const step = this.mutationRates.step;\n\n        this.genes = this.genes.map((gene) => {\n            if (Math.random() < PERTUBE_CHANCE) {\n                gene.weight = gene.weight + Math.random() * step * 2 - step;\n            } else {\n                gene.weight = Math.random() * 4 - 2;\n            }\n            return gene;\n        });\n    }\n\n    linkMutate() {\n        // console.log(\"Performing link mutation\");\n        let neuron1 = this.getRandomNeuron(false)\n        let neuron2 = this.getRandomNeuron(true)\n\n        const gene = new Gene()\n        if (neuron1.id < _constants__WEBPACK_IMPORTED_MODULE_0__[\"INPUT_NEURONS\"] && neuron2.id < _constants__WEBPACK_IMPORTED_MODULE_0__[\"INPUT_NEURONS\"]) {\n            // Both input nodes, we can't link these\n            return;\n        }\n\n        if (neuron1.id < neuron2.id) {\n            gene.from = neuron1.id;\n            gene.to = neuron2.id;\n        } else {\n            gene.from = neuron2.id;\n            gene.to = neuron1.id;\n        }\n\n        if (this.hasSameGene(gene)) {\n            // Don't want two links betwen the same pair of neurons\n            return;\n        }\n\n        gene.innovation = _innovation__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getNext();\n        gene.weight = Math.random() * 4 - 2;\n\n        // console.log(\"Inserting new gene: \", gene);\n        this.genes.push(gene);\n    }\n\n    /* Takes a random gene, disables it, then creates a\n    a new neuron with 2 new genes, one gene going to the old genes\n    input and one to the old genes output. */\n    nodeMutate() {\n        // console.log(\"Performing node mutation\");\n        if (this.genes.length == 0) {\n            return;\n        }\n\n        const gene = this.getRandomGene();\n        if (!gene.enabled) {\n            return;\n        }\n        gene.enabled = false;\n\n        this.maxNeuron++;\n        const neuronId = this.maxNeuron;\n\n        const gene1 = gene.clone();\n        gene1.to = neuronId;\n        gene1.weight = 1;\n        gene1.innovation = _innovation__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getNext()\n        gene1.enabled = true;\n        this.genes.push(gene1);\n\n        const gene2 = gene.clone();\n        gene2.from = neuronId;\n        gene2.weight = 1;\n        gene2.innovation = _innovation__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getNext();\n        gene2.enabled = true;\n        this.genes.push(gene2);\n\n        // console.log(\"Inserting new gene1: \", gene1);\n        // console.log(\"Inserting new gene2: \", gene2);\n    }\n\n    enableMutate() {\n        // console.log(\"Performing enableMutate\");\n        if (this.genes.length == 0) return;\n        const gene = this.getRandomGene();\n        // console.log(\"Enabling gene: \", gene);\n        gene.enabled = true;\n    }\n\n    disableMutate() {\n        // console.log(\"Performing disableMutate\");\n        if (this.genes.length == 0) return;\n        const gene = this.getRandomGene();\n        // console.log(\"Disabling gene:\", gene);\n        gene.enabled = false;\n    }\n\n    calculateWeights() {\n        // const neuronsWithValues = this.neurons.filter((n) => n.value != 0).map((n) => n.id);\n        // console.log(\"Neurons with values: \", neuronsWithValues);\n        for (let i = 0; i < this.neurons.length; i++) {\n            let neuron = this.neurons[i];\n            if (!neuron) continue;\n            if (neuron.incoming.length > 0) {\n                let sum = 0;\n            // if (neuron.incoming.length > 0) {\n            //     let incomingNeuronIds = neuron.incoming.map((i) => i.from); \n            //     console.log(\"Incoming neuron Ids: \", incomingNeuronIds);\n            //     let matchingNeurons = incomingNeuronIds.filter((id) => neuronsWithValues.includes(id))\n            //     if (matchingNeurons.length > 0) {\n            //         console.log(\"Found matching ids: \", matchingNeurons);\n            //     }\n            // }\n                for (let j = 0; j < neuron.incoming.length; j++) {\n                    let incoming = neuron.incoming[j];\n                    let other = this.neurons[incoming.from];\n                    sum += incoming.weight * other.value;  \n                }\n                neuron.value = Object(_math__WEBPACK_IMPORTED_MODULE_1__[\"sigmoid\"])(sum);\n            }\n        }\n    }\n}\n\n//# sourceURL=webpack:///./src/genome.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _bot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bot */ \"./src/bot.js\");\n/* harmony import */ var _battleground__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./battleground */ \"./src/battleground.js\");\n/* harmony import */ var _trainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./trainer */ \"./src/trainer.js\");\n/* harmony import */ var _species_1_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../species-1.json */ \"./species-1.json\");\nvar _species_1_json__WEBPACK_IMPORTED_MODULE_3___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../species-1.json */ \"./species-1.json\", 1);\n/* harmony import */ var _species_2_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../species-2.json */ \"./species-2.json\");\nvar _species_2_json__WEBPACK_IMPORTED_MODULE_4___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../species-2.json */ \"./species-2.json\", 1);\n/* harmony import */ var _species_3_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../species-3.json */ \"./species-3.json\");\nvar _species_3_json__WEBPACK_IMPORTED_MODULE_5___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../species-3.json */ \"./species-3.json\", 1);\n/* harmony import */ var _species_4_json__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../species-4.json */ \"./species-4.json\");\nvar _species_4_json__WEBPACK_IMPORTED_MODULE_6___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../species-4.json */ \"./species-4.json\", 1);\n// The main file that will import the battleground and bot and play bots against each other\n\n\n\n\n\n\n\n\n\nconst trainer = new _trainer__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\ntrainer.initializeSpecies();\n// trainer.loadSpeciesFromJSON({genomes: species1});\n// trainer.loadSpeciesFromJSON({genomes: species2});\n// trainer.loadSpeciesFromJSON({genomes: species3});\n// trainer.loadSpeciesFromJSON({genomes: species4});\nbattle();\n\nfunction battle() {\n    // Bot 1 is the one we're training\n    const bot1 = new _bot__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1);\n    bot1.loadGenome(trainer.getRandomGenome());\n\n    // Bot 2 just does random stuff\n    const bot2 = new _bot__WEBPACK_IMPORTED_MODULE_0__[\"default\"](2);\n    bot2.loadGenome(trainer.getRandomGenome());\n    bot2.selectAIMethod();\n\n    // const commands = bot.update(inputs);\n\n    const battleground = new _battleground__WEBPACK_IMPORTED_MODULE_1__[\"default\"]()\n    battleground.addBots(bot1, bot2);\n    battleground.start((results) => {\n        console.log(\"Battle results: \", results);\n\n        let botFitness = Math.floor(results.totalTime) + ((5 - bot2.lives) * 10)\n        if (results.winner == 1) {\n            botFitness += bot1.lives * 10;\n            botFitness += 100;\n        }\n        console.log(\"Bot fitness is: \", botFitness);\n        bot1.genome.addFitness(botFitness);\n        bot1.genome.totalRounds++;\n\n        const roundsRemaining = trainer.getTotalRoundsRemaining() \n        console.log(\"Round Complete, \" + roundsRemaining + \" rounds remaining\");\n        if (roundsRemaining <= 0) {\n            trainer.newGeneration();\n        }\n\n        setTimeout(battle);\n    });\n}\n\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/innovation.js":
/*!***************************!*\
  !*** ./src/innovation.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* This is a singleton class that returns an innovation number for a new gene\nInnovation numbers are used to keep track of genes when they are passed from\nparent to child. When doing child creation only the genes with the same innovation\nnumber from each parent are swapped so that genes are not 'lost' in the creation\nof the child */\n\nclass Innovation {\n    constructor() {\n        this.innovation = 0;\n    }\n\n    getNext() {\n        this.innovation++;\n        return this.innovation;\n    }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (new Innovation());\n\n//# sourceURL=webpack:///./src/innovation.js?");

/***/ }),

/***/ "./src/math.js":
/*!*********************!*\
  !*** ./src/math.js ***!
  \*********************/
/*! exports provided: distanceBetweenPoints, translateMatrix, rotateMatrix, rotateAroundPoint, degreesToRadians, multiplyMatrixAndPoint, sigmoid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"distanceBetweenPoints\", function() { return distanceBetweenPoints; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"translateMatrix\", function() { return translateMatrix; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateMatrix\", function() { return rotateMatrix; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateAroundPoint\", function() { return rotateAroundPoint; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"degreesToRadians\", function() { return degreesToRadians; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiplyMatrixAndPoint\", function() { return multiplyMatrixAndPoint; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sigmoid\", function() { return sigmoid; });\n\n\nfunction distanceBetweenPoints(x1, y1, x2, y2) {\n    var a = x1 - x2;\n    var b = y1 - y2;\n    return Math.sqrt(a*a + b*b);\n}\n\nfunction translateMatrix(matrix, point) {\n    const resultX = matrix[0] + point[0];\n    const resultY = matrix[1] + point[1];\n\n    return [resultX, resultY];\n}\n\nfunction rotateMatrix(matrix, point) {\n    const resultX = matrix[0][0] * point[0] + matrix[0][1] * point[1];\n    const resultY = matrix[1][0] * point[0] + matrix[1][1] * point[1];\n\n    return [resultX, resultY];\n}\n\nfunction rotateAroundPoint(pivotX, pivotY, angle, point) {\n    const s = Math.sin(angle);\n    const c = Math.cos(angle);\n\n    point[0] -= pivotX;\n    point[1] -= pivotY;\n\n    const rotatedX = point[0] * c - point[1] * s;\n    const rotatedY = point[0] * s + point[1] * c;\n\n    const resultX = rotatedX + pivotX;\n    const resultY = rotatedY + pivotY;\n\n    return [resultX, resultY];\n}\n\nfunction degreesToRadians(degrees) {\n    return degrees * Math.PI / 180\n}\n\nfunction multiplyMatrixAndPoint(matrix, point) {\n\n    var x = point[0];\n    var y = point[1];\n    var w = 1;\n    \n    var resultX = (x * matrix[0][0]) + (y * matrix[0][1]) + (w * matrix[0][2]);\n    var resultY = (x * matrix[1][0]) + (y * matrix[1][1]) + (w * matrix[1][2]);\n    \n    return [resultX, resultY];\n}\n\nfunction sigmoid(value) {\n    // return 1 / (1 + Math.pow(Math.E, -value));\n\n    return 2 / (1 + Math.exp(-4.9 * value)) - 1;\n}\n\n//# sourceURL=webpack:///./src/math.js?");

/***/ }),

/***/ "./src/species.js":
/*!************************!*\
  !*** ./src/species.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Species; });\n/* harmony import */ var _genome__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./genome */ \"./src/genome.js\");\n\n\n\nconst MAX_STALE_CHECKS = 15;\nconst CROSSOVER_CHANCE = 75;\n\nclass Species {\n    constructor() {\n        this.genomes = [];\n        this.staleness = 0;\n        this.maxFitness = 0;\n        this.averageGlobalRank = 0;\n    }\n\n    static loadFromJSON(data) {\n        const species = new Species();\n        const genomes = data.genomes;\n        genomes.forEach((genomeData) => {\n            const genome = _genome__WEBPACK_IMPORTED_MODULE_0__[\"default\"].loadFromJSON(genomeData);\n            species.genomes.push(genome);\n        })\n        return species;\n    }\n\n    // Go through all genomes and remove the unfittest 50%\n    cull(allButOne) {\n        this.genomes.sort((a, b) => {\n            return b.fitness - a.fitness;\n        });\n\n        const remainingGenomes = allButOne ? 1 : Math.ceil(this.genomes.length / 2);\n        console.log(\"Genomes before the cull: \", this.genomes);\n\n        this.genomes = this.genomes.slice(0, remainingGenomes)\n        console.log(\"Genomes after the cull: \", this.genomes);\n    }\n\n    // Go through genomes and check if any have surpassed the \n    // last maxFitness, if none have for MAX_STALE_CHECKS then \n    // this species is stale and should be eliminated\n    checkStale(overallMaxFitness) {\n        let maxFitness = 0;\n\n        this.genomes.forEach(function (genome) {\n            maxFitness = Math.max(maxFitness, genome.fitness);\n        });\n\n        if (maxFitness <= this.maxFitness && maxFitness <= (overallMaxFitness * 0.9)) {\n            this.staleness++;\n        } \n\n        this.maxFitness = Math.max(this.maxFitness, maxFitness);\n        return this.staleness > MAX_STALE_CHECKS\n    }\n\n    calculateAverageGlobalRank() {\n        let totalGlobalRank = 0;\n        this.genomes.forEach(function (genome) {\n            totalGlobalRank += genome.globalRank;\n        });\n\n        this.averageGlobalRank = totalGlobalRank / this.genomes.length;\n    }\n\n    createChildren() {\n        const children = [];\n        const totalChildren = Math.floor(this.breed);\n        for (var i = 0; i < totalChildren; i++) {\n            let newChild = this.createChild();\n            children.push(newChild);\n        }\n        return children;\n    }\n\n    createChild() {\n        let child = null;\n        const shouldCreateCrossover = Math.floor(Math.random() * 100) < CROSSOVER_CHANCE;\n        if (shouldCreateCrossover) {\n            const parent1 = this.getRandomGenome();\n            const parent2 = this.getRandomGenome();\n\n            child = new _genome__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n            if (parent1.fitness > parent2.fitness) {\n                child.inheritFromParents(parent1, parent2);\n            } else {\n                child.inheritFromParents(parent2, parent1);\n            }\n\n            child.mutate();\n        } else {\n            child = this.cloneRandomGenome();\n        }\n\n        child.initializeNeurons();\n        return child;\n    }\n\n    resetFitness() {\n        this.genomes.forEach((genome) => {\n            genome.fitness = 0;\n        });\n    }\n\n    getRandomGenome() {\n        const choice = Math.floor(Math.random() * this.genomes.length);\n        return this.genomes[choice];\n    }\n\n    cloneRandomGenome() {\n        return this.getRandomGenome().clone();\n    }\n}\n\n\n//# sourceURL=webpack:///./src/species.js?");

/***/ }),

/***/ "./src/trainer.js":
/*!************************!*\
  !*** ./src/trainer.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Trainer; });\n/* harmony import */ var _species__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./species */ \"./src/species.js\");\n/* harmony import */ var _genome__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./genome */ \"./src/genome.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ \"./src/constants.js\");\n/**\n * The trainer holds all the species and genomes inside those species. \n * It handles keeping track of the fitnesses of each genome, eliminating those that \n * are unfit, saving and loading genomes to disk etc. \n */\n\n\n\n\n\nconst INITIAL_SPECIES = 3;\nconst INITIAL_GENOMES_PER_SPECIES = 3;\nconst POPULATION = 100;\n\nclass Trainer {\n    constructor() {\n        this.maxFitness = 0;\n        this.totalGenerations = 1;\n        this.species = [];\n        this.children = [];\n    }\n\n    initializeSpecies() {\n        for (var i = 0; i < INITIAL_SPECIES; i++) {\n            let species = new _species__WEBPACK_IMPORTED_MODULE_0__[\"default\"]()\n            for (var j = 0; j < INITIAL_GENOMES_PER_SPECIES; j++) {\n                let genome = this.createNewGenome();\n                species.genomes.push(genome);\n            }\n            this.species.push(species);\n        }\n    }\n\n    loadSpeciesFromJSON(data) {\n        const species = _species__WEBPACK_IMPORTED_MODULE_0__[\"default\"].loadFromJSON(data);\n        this.species.push(species);\n    }\n\n    createNewGenome() {\n        const genome = new _genome__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        genome.mutate();\n        genome.initializeNeurons();\n        return genome;\n    }\n\n    /* Returns a random genome that hasn't had enough battles yet. \n    Genomes each do n battles to determine their fitness where n\n    is the generation that we're on now (so as genomes get better they fight longer)\n    */\n    getRandomGenome() {\n        let genome = null;\n        const roundsPerGenome = this.totalGenerations;\n        while (genome == null || genome.totalRounds >= roundsPerGenome) {\n            genome = this.getRandomSpecies().getRandomGenome();\n        }\n        console.log(\"New Genome genes: \", genome.genes);\n        return genome;\n    }\n\n    getRandomSpecies() {\n        return this.species[Math.floor(Math.random() * this.species.length)];\n    }\n\n    /* Go through each species, eliminate all below average genomes in the species */\n    cullSpecies(allButOne) {\n        this.species.forEach((species) => {\n            species.cull(allButOne);\n        });\n    }\n\n    rankGenomesGlobally() {\n        const allGenomes = [];\n        this.species.forEach((species) => {\n            species.genomes.forEach((genome) => {\n                allGenomes.push(genome);\n            });\n        });\n\n        allGenomes.sort((a, b) => {\n            return a.fitness - b.fitness;\n        });\n\n        // Global rank is from 1 = worst to allGenomes.length = best\n        for (var i = 0; i < allGenomes.length; i++) {\n            allGenomes[i].globalRank = i;\n        }\n\n    }\n\n    removeStaleSpecies() {\n        this.species = this.species.filter((species) => {\n            let isStale = species.checkStale(this.maxFitness);\n            return !isStale;\n        });\n    }\n\n    calculateGlobalMaxFitness() {\n        this.maxFitness = this.species.reduce((maxFitness, species) => {\n            return Math.max(maxFitness, species.maxFitness || 0);\n        }, this.maxFitness)\n        console.log(\"Global max fitness is now: \", this.maxFitness);\n    }\n\n    calculateSpeciesAverageGlobalRank() {\n        this.species.forEach((species) => {\n            species.calculateAverageGlobalRank()\n        });\n    }\n\n    removeWeakSpecies() {\n        let totalAverageGlobalRank = 0;\n        this.species.forEach((species) => {\n            totalAverageGlobalRank += species.averageGlobalRank;\n        });\n\n        console.log(\"Removing weak species. TAGR: \", totalAverageGlobalRank, \" species: \", this.species);\n\n        this.species = this.species.map(function(species) {\n            species.breed = Math.floor((species.averageGlobalRank / totalAverageGlobalRank) * POPULATION) - 1;\n            return species;\n        }).filter(function (species) {\n            return species.breed >= 1;\n        });\n    }\n\n    createChildren() {\n        this.children = [];\n        this.species.forEach((species) => {\n            const newChildren = species.createChildren();\n            this.children = this.children.concat(newChildren);\n        });\n    }\n\n    resetFitness() {\n        this.species.forEach(function(species) {\n            species.resetFitness();\n        });\n    }\n\n    assignChildrenToSpecies() {\n        this.children.forEach((child) => {\n            const sameSpecies = this.species.find((species) => {\n                return this.isSameSpecies(child, species.genomes[0]);\n            });\n            if (sameSpecies) {\n                return sameSpecies.genomes.push(child);\n            }\n\n            console.log(\"Creating new species!\")\n            const newSpecies = new _species__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n            newSpecies.genomes.push(child);\n            this.species.push(newSpecies);\n        });\n        this.children = [];\n    }\n\n    isSameSpecies(genome1, genome2) {\n        const dd = _constants__WEBPACK_IMPORTED_MODULE_2__[\"DELTA_DISJOINT\"] * this.disjoint(genome1.genes, genome2.genes);\n        const dw = _constants__WEBPACK_IMPORTED_MODULE_2__[\"DELTA_WEIGHTS\"] * this.weights(genome1.genes, genome2.genes);\n        return dd + dw < _constants__WEBPACK_IMPORTED_MODULE_2__[\"DELTA_THRESHOLD\"]\n    }\n\n    // Calculate the fraction of the number of genes that these two genepools don't have in common\n    disjoint(genes1, genes2) {\n        const gene1innovations = {};\n        const gene2innovations = {};\n        genes1.forEach((gene) => {\n            gene1innovations[gene.innovation] = true;\n        });\n        genes2.forEach((gene) => {\n            gene2innovations[gene.innovation] = true;\n        });\n\n        let disjointedGenes = 0;\n        genes1.forEach((gene) => {\n            if (!gene2innovations[gene.innovation]) {\n                disjointedGenes++;\n            }\n        });\n        genes2.forEach((gene) => {\n            if (!gene1innovations[gene.innovation]) {\n                disjointedGenes++;\n            }\n        });\n\n        const maxTotalGenes = Math.max(genes1.length, genes2.length);\n        return disjointedGenes / maxTotalGenes;\n    }\n\n    weights(genes1, genes2) {\n        const gene2innovations = {};\n        genes2.forEach((gene) => {\n            gene2innovations[gene.innovation] = gene;\n        });\n\n        let sum = 0;\n        let coincident = 0;\n        genes1.forEach((gene) => {\n            if (gene2innovations[gene.innovation] != null) {\n                const gene2 = gene2innovations[gene.innovation];\n                sum = sum + Math.abs(gene.weight - gene2.weight);\n                coincident++;\n            }\n        });\n\n        return sum / coincident;\n    }\n\n\n    newGeneration() {\n        this.cullSpecies();\n        this.rankGenomesGlobally();\n        this.removeStaleSpecies();\n        this.calculateGlobalMaxFitness();\n        this.rankGenomesGlobally();\n        this.calculateSpeciesAverageGlobalRank();\n        this.removeWeakSpecies();\n        this.createChildren();\n        this.cullSpecies(true);\n        this.resetFitness();\n        this.assignChildrenToSpecies();\n        this.totalGenerations++;\n        console.log(\"On generation \" + this.totalGenerations + \" species is: \", this.species);\n    }\n\n    getTotalRoundsRemaining() {\n        let totalRoundsRemaining = 0;\n        const roundsPerGenome = this.totalGenerations;\n        this.species.forEach(function(species) {\n            species.genomes.forEach(function(genome) {\n                totalRoundsRemaining += roundsPerGenome - genome.totalRounds;\n            })\n        });\n        return totalRoundsRemaining;\n    }\n\n}\n\n//# sourceURL=webpack:///./src/trainer.js?");

/***/ })

/******/ });